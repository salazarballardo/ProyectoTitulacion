
Lora_Monitor_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00001ce4  00001d78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ce4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000082  00800132  00800132  00001daa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001daa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e08  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e8  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002134  00000000  00000000  00002030  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe1  00000000  00000000  00004164  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001539  00000000  00000000  00005145  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000438  00000000  00000000  00006680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009f2  00000000  00000000  00006ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001310  00000000  00000000  000074aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  000087ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b1 00 	jmp	0x162	; 0x162 <__ctors_end>
       4:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       8:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
       c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      10:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      14:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      18:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      1c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      20:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      24:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      28:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      2c:	0c 94 ce 06 	jmp	0xd9c	; 0xd9c <__vector_11>
      30:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      34:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      38:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      3c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      40:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      44:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      48:	0c 94 56 07 	jmp	0xeac	; 0xeac <__vector_18>
      4c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      50:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      54:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      58:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      5c:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      60:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>
      64:	0c 94 ce 00 	jmp	0x19c	; 0x19c <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 40       	sbci	r16, 0x00	; 0
      6a:	7a 10       	cpse	r7, r10
      6c:	f3 5a       	subi	r31, 0xA3	; 163
      6e:	00 a0       	ldd	r0, Z+32	; 0x20
      70:	72 4e       	sbci	r23, 0xE2	; 226
      72:	18 09       	sbc	r17, r8
      74:	00 10       	cpse	r0, r0
      76:	a5 d4       	rcall	.+2378   	; 0x9c2 <__stack+0xc3>
      78:	e8 00       	.word	0x00e8	; ????
      7a:	00 e8       	ldi	r16, 0x80	; 128
      7c:	76 48       	sbci	r23, 0x86	; 134
      7e:	17 00       	.word	0x0017	; ????
      80:	00 e4       	ldi	r16, 0x40	; 64
      82:	0b 54       	subi	r16, 0x4B	; 75
      84:	02 00       	.word	0x0002	; ????
      86:	00 ca       	rjmp	.-3072   	; 0xfffff488 <__eeprom_end+0xff7ef488>
      88:	9a 3b       	cpi	r25, 0xBA	; 186
      8a:	00 00       	nop
      8c:	00 e1       	ldi	r16, 0x10	; 16
      8e:	f5 05       	cpc	r31, r5
      90:	00 00       	nop
      92:	80 96       	adiw	r24, 0x20	; 32
      94:	98 00       	.word	0x0098	; ????
      96:	00 00       	nop
      98:	40 42       	sbci	r20, 0x20	; 32
      9a:	0f 00       	.word	0x000f	; ????
      9c:	00 00       	nop
      9e:	a0 86       	std	Z+8, r10	; 0x08
      a0:	01 00       	.word	0x0001	; ????
      a2:	00 00       	nop
      a4:	10 27       	eor	r17, r16
      a6:	00 00       	nop
      a8:	00 00       	nop
      aa:	e8 03       	fmulsu	r22, r16
      ac:	00 00       	nop
      ae:	00 00       	nop
      b0:	64 00       	.word	0x0064	; ????
      b2:	00 00       	nop
      b4:	00 00       	nop
      b6:	0a 00       	.word	0x000a	; ????
      b8:	00 00       	nop
      ba:	00 00       	nop
      bc:	01 00       	.word	0x0001	; ????
      be:	00 00       	nop
      c0:	00 00       	nop
      c2:	2c 76       	andi	r18, 0x6C	; 108
      c4:	d8 88       	ldd	r13, Y+16	; 0x10
      c6:	dc 67       	ori	r29, 0x7C	; 124
      c8:	4f 08       	sbc	r4, r15
      ca:	23 df       	rcall	.-442    	; 0xffffff12 <__eeprom_end+0xff7eff12>
      cc:	c1 df       	rcall	.-126    	; 0x50 <__SREG__+0x11>
      ce:	ae 59       	subi	r26, 0x9E	; 158
      d0:	e1 b1       	in	r30, 0x01	; 1
      d2:	b7 96       	adiw	r30, 0x27	; 39
      d4:	e5 e3       	ldi	r30, 0x35	; 53
      d6:	e4 53       	subi	r30, 0x34	; 52
      d8:	c6 3a       	cpi	r28, 0xA6	; 166
      da:	e6 51       	subi	r30, 0x16	; 22
      dc:	99 76       	andi	r25, 0x69	; 105
      de:	96 e8       	ldi	r25, 0x86	; 134
      e0:	e6 c2       	rjmp	.+1484   	; 0x6ae <getCoordenadasGPS+0x136>
      e2:	84 26       	eor	r8, r20
      e4:	eb 89       	ldd	r30, Y+19	; 0x13
      e6:	8c 9b       	sbis	0x11, 4	; 17
      e8:	62 ed       	ldi	r22, 0xD2	; 210
      ea:	40 7c       	andi	r20, 0xC0	; 192
      ec:	6f fc       	.word	0xfc6f	; ????
      ee:	ef bc       	out	0x2f, r14	; 47
      f0:	9c 9f       	mul	r25, r28
      f2:	40 f2       	brcs	.-112    	; 0x84 <__trampolines_end+0x1c>
      f4:	ba a5       	ldd	r27, Y+42	; 0x2a
      f6:	6f a5       	ldd	r22, Y+47	; 0x2f
      f8:	f4 90       	lpm	r15, Z
      fa:	05 5a       	subi	r16, 0xA5	; 165
      fc:	2a f7       	brpl	.-54     	; 0xc8 <__trampolines_end+0x60>
      fe:	5c 93       	st	X, r21
     100:	6b 6c       	ori	r22, 0xCB	; 203
     102:	f9 67       	ori	r31, 0x79	; 121
     104:	6d c1       	rjmp	.+730    	; 0x3e0 <read_dht11+0xa6>
     106:	1b fc       	.word	0xfc1b	; ????
     108:	e0 e4       	ldi	r30, 0x40	; 64
     10a:	0d 47       	sbci	r16, 0x7D	; 125
     10c:	fe f5       	brtc	.+126    	; 0x18c <.do_clear_bss_loop>
     10e:	20 e6       	ldi	r18, 0x60	; 96
     110:	b5 00       	.word	0x00b5	; ????
     112:	d0 ed       	ldi	r29, 0xD0	; 208
     114:	90 2e       	mov	r9, r16
     116:	03 00       	.word	0x0003	; ????
     118:	94 35       	cpi	r25, 0x54	; 84
     11a:	77 05       	cpc	r23, r7
     11c:	00 80       	ld	r0, Z
     11e:	84 1e       	adc	r8, r20
     120:	08 00       	.word	0x0008	; ????
     122:	00 20       	and	r0, r0
     124:	4e 0a       	sbc	r4, r30
     126:	00 00       	nop
     128:	00 c8       	rjmp	.-4096   	; 0xfffff12a <__eeprom_end+0xff7ef12a>
     12a:	0c 33       	cpi	r16, 0x3C	; 60
     12c:	33 33       	cpi	r19, 0x33	; 51
     12e:	33 0f       	add	r19, r19
     130:	98 6e       	ori	r25, 0xE8	; 232
     132:	12 83       	std	Z+2, r17	; 0x02
     134:	11 41       	sbci	r17, 0x11	; 17
     136:	ef 8d       	ldd	r30, Y+31	; 0x1f
     138:	21 14       	cp	r2, r1
     13a:	89 3b       	cpi	r24, 0xB9	; 185
     13c:	e6 55       	subi	r30, 0x56	; 86
     13e:	16 cf       	rjmp	.-468    	; 0xffffff6c <__eeprom_end+0xff7eff6c>
     140:	fe e6       	ldi	r31, 0x6E	; 110
     142:	db 18       	sub	r13, r11
     144:	d1 84       	ldd	r13, Z+9	; 0x09
     146:	4b 38       	cpi	r20, 0x8B	; 139
     148:	1b f7       	brvc	.-58     	; 0x110 <__trampolines_end+0xa8>
     14a:	7c 1d       	adc	r23, r12
     14c:	90 1d       	adc	r25, r0
     14e:	a4 bb       	out	0x14, r26	; 20
     150:	e4 24       	eor	r14, r4
     152:	20 32       	cpi	r18, 0x20	; 32
     154:	84 72       	andi	r24, 0x24	; 36
     156:	5e 22       	and	r5, r30
     158:	81 00       	.word	0x0081	; ????
     15a:	c9 f1       	breq	.+114    	; 0x1ce <readByte+0x2e>
     15c:	24 ec       	ldi	r18, 0xC4	; 196
     15e:	a1 e5       	ldi	r26, 0x51	; 81
     160:	3d 27       	eor	r19, r29

00000162 <__ctors_end>:
     162:	11 24       	eor	r1, r1
     164:	1f be       	out	0x3f, r1	; 63
     166:	cf ef       	ldi	r28, 0xFF	; 255
     168:	d8 e0       	ldi	r29, 0x08	; 8
     16a:	de bf       	out	0x3e, r29	; 62
     16c:	cd bf       	out	0x3d, r28	; 61

0000016e <__do_copy_data>:
     16e:	11 e0       	ldi	r17, 0x01	; 1
     170:	a0 e0       	ldi	r26, 0x00	; 0
     172:	b1 e0       	ldi	r27, 0x01	; 1
     174:	e4 ee       	ldi	r30, 0xE4	; 228
     176:	fc e1       	ldi	r31, 0x1C	; 28
     178:	02 c0       	rjmp	.+4      	; 0x17e <__do_copy_data+0x10>
     17a:	05 90       	lpm	r0, Z+
     17c:	0d 92       	st	X+, r0
     17e:	a2 33       	cpi	r26, 0x32	; 50
     180:	b1 07       	cpc	r27, r17
     182:	d9 f7       	brne	.-10     	; 0x17a <__do_copy_data+0xc>

00000184 <__do_clear_bss>:
     184:	21 e0       	ldi	r18, 0x01	; 1
     186:	a2 e3       	ldi	r26, 0x32	; 50
     188:	b1 e0       	ldi	r27, 0x01	; 1
     18a:	01 c0       	rjmp	.+2      	; 0x18e <.do_clear_bss_start>

0000018c <.do_clear_bss_loop>:
     18c:	1d 92       	st	X+, r1

0000018e <.do_clear_bss_start>:
     18e:	a4 3b       	cpi	r26, 0xB4	; 180
     190:	b2 07       	cpc	r27, r18
     192:	e1 f7       	brne	.-8      	; 0x18c <.do_clear_bss_loop>
     194:	0e 94 7e 04 	call	0x8fc	; 0x8fc <main>
     198:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <_exit>

0000019c <__bad_interrupt>:
     19c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a0 <readByte>:
Se lee el byte correspondiente retornado por el dht11
param unsigned char* data : retorna el byte leido por referencia
return void
*************************************************************************/
static void readByte(unsigned char* data)
{
     1a0:	fc 01       	movw	r30, r24
    unsigned char countBit = 0;
     1a2:	20 e0       	ldi	r18, 0x00	; 0
	
	while (countBit < 8)
     1a4:	64 c0       	rjmp	.+200    	; 0x26e <readByte+0xce>
param void
return void
*************************************************************************/
static inline void timer0Start()
{
	TCCR0B &= ~(1<<CS00);  //preescaler 8
     1a6:	95 b5       	in	r25, 0x25	; 37
     1a8:	9e 7f       	andi	r25, 0xFE	; 254
     1aa:	95 bd       	out	0x25, r25	; 37
	TCCR0B |= (1<<CS01);
     1ac:	95 b5       	in	r25, 0x25	; 37
     1ae:	92 60       	ori	r25, 0x02	; 2
     1b0:	95 bd       	out	0x25, r25	; 37
	TCCR0B &= ~(1<<CS02);
     1b2:	95 b5       	in	r25, 0x25	; 37
     1b4:	9b 7f       	andi	r25, 0xFB	; 251
     1b6:	95 bd       	out	0x25, r25	; 37
	
	while (countBit < 8)
	{
		//leemos el pin
		timer0Start();
		while (!BIT_TEST(PORDATAREAD, PINDATADHT) && TCNT0 < 141);  //mientras estemos en cero y no pase de 70us
     1b8:	18 99       	sbic	0x03, 0	; 3
     1ba:	03 c0       	rjmp	.+6      	; 0x1c2 <readByte+0x22>
     1bc:	96 b5       	in	r25, 0x26	; 38
     1be:	9d 38       	cpi	r25, 0x8D	; 141
     1c0:	d8 f3       	brcs	.-10     	; 0x1b8 <readByte+0x18>
		
		if (TCNT0 > 150)
     1c2:	86 b5       	in	r24, 0x26	; 38
     1c4:	87 39       	cpi	r24, 0x97	; 151
     1c6:	70 f0       	brcs	.+28     	; 0x1e4 <readByte+0x44>
		{
			errorRead = 1;
     1c8:	81 e0       	ldi	r24, 0x01	; 1
     1ca:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <errorRead>
param void
return void
*************************************************************************/
static inline void timer0Stop()
{
	TCCR0B &= ~(1<<CS00);
     1ce:	85 b5       	in	r24, 0x25	; 37
     1d0:	8e 7f       	andi	r24, 0xFE	; 254
     1d2:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     1d4:	85 b5       	in	r24, 0x25	; 37
     1d6:	8d 7f       	andi	r24, 0xFD	; 253
     1d8:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
     1da:	85 b5       	in	r24, 0x25	; 37
     1dc:	8b 7f       	andi	r24, 0xFB	; 251
     1de:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
     1e0:	16 bc       	out	0x26, r1	; 38
     1e2:	08 95       	ret
param void
return void
*************************************************************************/
static inline void timer0Stop()
{
	TCCR0B &= ~(1<<CS00);
     1e4:	85 b5       	in	r24, 0x25	; 37
     1e6:	8e 7f       	andi	r24, 0xFE	; 254
     1e8:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     1ea:	85 b5       	in	r24, 0x25	; 37
     1ec:	8d 7f       	andi	r24, 0xFD	; 253
     1ee:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
     1f0:	85 b5       	in	r24, 0x25	; 37
     1f2:	8b 7f       	andi	r24, 0xFB	; 251
     1f4:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
     1f6:	16 bc       	out	0x26, r1	; 38
param void
return void
*************************************************************************/
static inline void timer0Start()
{
	TCCR0B &= ~(1<<CS00);  //preescaler 8
     1f8:	95 b5       	in	r25, 0x25	; 37
     1fa:	9e 7f       	andi	r25, 0xFE	; 254
     1fc:	95 bd       	out	0x25, r25	; 37
	TCCR0B |= (1<<CS01);
     1fe:	95 b5       	in	r25, 0x25	; 37
     200:	92 60       	ori	r25, 0x02	; 2
     202:	95 bd       	out	0x25, r25	; 37
	TCCR0B &= ~(1<<CS02);
     204:	95 b5       	in	r25, 0x25	; 37
     206:	9b 7f       	andi	r25, 0xFB	; 251
     208:	95 bd       	out	0x25, r25	; 37
		}
		else
		{
			timer0Stop();
			timer0Start();
			while (BIT_TEST(PORDATAREAD, PINDATADHT) && TCNT0 < 151);  //mientras estemos en uno y no pase de 75us en nivel alto
     20a:	18 9b       	sbis	0x03, 0	; 3
     20c:	03 c0       	rjmp	.+6      	; 0x214 <readByte+0x74>
     20e:	96 b5       	in	r25, 0x26	; 38
     210:	97 39       	cpi	r25, 0x97	; 151
     212:	d8 f3       	brcs	.-10     	; 0x20a <readByte+0x6a>
			
			if (TCNT0 > 170)
     214:	86 b5       	in	r24, 0x26	; 38
     216:	8b 3a       	cpi	r24, 0xAB	; 171
     218:	70 f0       	brcs	.+28     	; 0x236 <readByte+0x96>
			{
				errorRead = 1;
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <errorRead>
param void
return void
*************************************************************************/
static inline void timer0Stop()
{
	TCCR0B &= ~(1<<CS00);
     220:	85 b5       	in	r24, 0x25	; 37
     222:	8e 7f       	andi	r24, 0xFE	; 254
     224:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     226:	85 b5       	in	r24, 0x25	; 37
     228:	8d 7f       	andi	r24, 0xFD	; 253
     22a:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
     22c:	85 b5       	in	r24, 0x25	; 37
     22e:	8b 7f       	andi	r24, 0xFB	; 251
     230:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
     232:	16 bc       	out	0x26, r1	; 38
     234:	08 95       	ret
				timer0Stop();
				break;
			}
			else
			{
				if (TCNT0 > 65)             //si el pulso fue mayor a 30us es 1
     236:	86 b5       	in	r24, 0x26	; 38
     238:	82 34       	cpi	r24, 0x42	; 66
     23a:	70 f0       	brcs	.+28     	; 0x258 <readByte+0xb8>
				{
					*data |= (1<<(7 - countBit));
     23c:	47 e0       	ldi	r20, 0x07	; 7
     23e:	50 e0       	ldi	r21, 0x00	; 0
     240:	42 1b       	sub	r20, r18
     242:	51 09       	sbc	r21, r1
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	02 c0       	rjmp	.+4      	; 0x24e <readByte+0xae>
     24a:	88 0f       	add	r24, r24
     24c:	99 1f       	adc	r25, r25
     24e:	4a 95       	dec	r20
     250:	e2 f7       	brpl	.-8      	; 0x24a <readByte+0xaa>
     252:	90 81       	ld	r25, Z
     254:	89 2b       	or	r24, r25
     256:	80 83       	st	Z, r24
param void
return void
*************************************************************************/
static inline void timer0Stop()
{
	TCCR0B &= ~(1<<CS00);
     258:	85 b5       	in	r24, 0x25	; 37
     25a:	8e 7f       	andi	r24, 0xFE	; 254
     25c:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     25e:	85 b5       	in	r24, 0x25	; 37
     260:	8d 7f       	andi	r24, 0xFD	; 253
     262:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
     264:	85 b5       	in	r24, 0x25	; 37
     266:	8b 7f       	andi	r24, 0xFB	; 251
     268:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
     26a:	16 bc       	out	0x26, r1	; 38
				
				timer0Stop();
			}
		}
		
		countBit++;
     26c:	2f 5f       	subi	r18, 0xFF	; 255
*************************************************************************/
static void readByte(unsigned char* data)
{
    unsigned char countBit = 0;
	
	while (countBit < 8)
     26e:	28 30       	cpi	r18, 0x08	; 8
     270:	08 f4       	brcc	.+2      	; 0x274 <readByte+0xd4>
     272:	99 cf       	rjmp	.-206    	; 0x1a6 <readByte+0x6>
     274:	08 95       	ret

00000276 <readstart_dht11>:
param void
return unsigned char error
*************************************************************************/
static unsigned char readstart_dht11()
{
	BIT_SET(PORTDATADHT, PINDATADHT);
     276:	85 b1       	in	r24, 0x05	; 5
     278:	81 60       	ori	r24, 0x01	; 1
     27a:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     27c:	80 ea       	ldi	r24, 0xA0	; 160
     27e:	8a 95       	dec	r24
     280:	f1 f7       	brne	.-4      	; 0x27e <readstart_dht11+0x8>
	
	_delay_us(30);          // wait 30us
	BIT_CLEAR(DDRPORTDHT, PINDATADHT);
     282:	84 b1       	in	r24, 0x04	; 4
     284:	8e 7f       	andi	r24, 0xFE	; 254
     286:	84 b9       	out	0x04, r24	; 4
param void
return void
*************************************************************************/
static inline void timer0Start()
{
	TCCR0B &= ~(1<<CS00);  //preescaler 8
     288:	85 b5       	in	r24, 0x25	; 37
     28a:	8e 7f       	andi	r24, 0xFE	; 254
     28c:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS01);
     28e:	85 b5       	in	r24, 0x25	; 37
     290:	82 60       	ori	r24, 0x02	; 2
     292:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
     294:	85 b5       	in	r24, 0x25	; 37
     296:	8b 7f       	andi	r24, 0xFB	; 251
     298:	85 bd       	out	0x25, r24	; 37
	
	_delay_us(30);          // wait 30us
	BIT_CLEAR(DDRPORTDHT, PINDATADHT);
	
	timer0Start();
	while (!BIT_TEST(PORDATAREAD, PINDATADHT) && TCNT0 < 200);  //mientras estemos en cero y no pase de 90us
     29a:	18 99       	sbic	0x03, 0	; 3
     29c:	03 c0       	rjmp	.+6      	; 0x2a4 <readstart_dht11+0x2e>
     29e:	86 b5       	in	r24, 0x26	; 38
     2a0:	88 3c       	cpi	r24, 0xC8	; 200
     2a2:	d8 f3       	brcs	.-10     	; 0x29a <readstart_dht11+0x24>
	//valueTimer0 = TCNT0;
	
	if (TCNT0 < 200)
     2a4:	86 b5       	in	r24, 0x26	; 38
     2a6:	88 3c       	cpi	r24, 0xC8	; 200
     2a8:	98 f5       	brcc	.+102    	; 0x310 <readstart_dht11+0x9a>
param void
return void
*************************************************************************/
static inline void timer0Stop()
{
	TCCR0B &= ~(1<<CS00);
     2aa:	85 b5       	in	r24, 0x25	; 37
     2ac:	8e 7f       	andi	r24, 0xFE	; 254
     2ae:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     2b0:	85 b5       	in	r24, 0x25	; 37
     2b2:	8d 7f       	andi	r24, 0xFD	; 253
     2b4:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
     2b6:	85 b5       	in	r24, 0x25	; 37
     2b8:	8b 7f       	andi	r24, 0xFB	; 251
     2ba:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
     2bc:	16 bc       	out	0x26, r1	; 38
param void
return void
*************************************************************************/
static inline void timer0Start()
{
	TCCR0B &= ~(1<<CS00);  //preescaler 8
     2be:	85 b5       	in	r24, 0x25	; 37
     2c0:	8e 7f       	andi	r24, 0xFE	; 254
     2c2:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS01);
     2c4:	85 b5       	in	r24, 0x25	; 37
     2c6:	82 60       	ori	r24, 0x02	; 2
     2c8:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
     2ca:	85 b5       	in	r24, 0x25	; 37
     2cc:	8b 7f       	andi	r24, 0xFB	; 251
     2ce:	85 bd       	out	0x25, r24	; 37
	
	if (TCNT0 < 200)
	{
		timer0Stop();
		timer0Start();
		while (BIT_TEST(PORDATAREAD, PINDATADHT) && TCNT0 < 200);  //mientras estemos en uno y no pase de 90us
     2d0:	18 9b       	sbis	0x03, 0	; 3
     2d2:	03 c0       	rjmp	.+6      	; 0x2da <readstart_dht11+0x64>
     2d4:	86 b5       	in	r24, 0x26	; 38
     2d6:	88 3c       	cpi	r24, 0xC8	; 200
     2d8:	d8 f3       	brcs	.-10     	; 0x2d0 <readstart_dht11+0x5a>
		//valueTimer0 = TCNT0;
		
		if (TCNT0 < 200)
     2da:	86 b5       	in	r24, 0x26	; 38
     2dc:	88 3c       	cpi	r24, 0xC8	; 200
     2de:	60 f4       	brcc	.+24     	; 0x2f8 <readstart_dht11+0x82>
param void
return void
*************************************************************************/
static inline void timer0Stop()
{
	TCCR0B &= ~(1<<CS00);
     2e0:	85 b5       	in	r24, 0x25	; 37
     2e2:	8e 7f       	andi	r24, 0xFE	; 254
     2e4:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     2e6:	85 b5       	in	r24, 0x25	; 37
     2e8:	8d 7f       	andi	r24, 0xFD	; 253
     2ea:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
     2ec:	85 b5       	in	r24, 0x25	; 37
     2ee:	8b 7f       	andi	r24, 0xFB	; 251
     2f0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
     2f2:	16 bc       	out	0x26, r1	; 38
		//valueTimer0 = TCNT0;
		
		if (TCNT0 < 200)
		{
			timer0Stop();
			return 1; 
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	08 95       	ret
param void
return void
*************************************************************************/
static inline void timer0Stop()
{
	TCCR0B &= ~(1<<CS00);
     2f8:	85 b5       	in	r24, 0x25	; 37
     2fa:	8e 7f       	andi	r24, 0xFE	; 254
     2fc:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     2fe:	85 b5       	in	r24, 0x25	; 37
     300:	8d 7f       	andi	r24, 0xFD	; 253
     302:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
     304:	85 b5       	in	r24, 0x25	; 37
     306:	8b 7f       	andi	r24, 0xFB	; 251
     308:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
     30a:	16 bc       	out	0x26, r1	; 38
			return 1; 
		}
		else
		{
			timer0Stop();
			return 0;
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	08 95       	ret
param void
return void
*************************************************************************/
static inline void timer0Stop()
{
	TCCR0B &= ~(1<<CS00);
     310:	85 b5       	in	r24, 0x25	; 37
     312:	8e 7f       	andi	r24, 0xFE	; 254
     314:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     316:	85 b5       	in	r24, 0x25	; 37
     318:	8d 7f       	andi	r24, 0xFD	; 253
     31a:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS02);
     31c:	85 b5       	in	r24, 0x25	; 37
     31e:	8b 7f       	andi	r24, 0xFB	; 251
     320:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 0;
     322:	16 bc       	out	0x26, r1	; 38
		}
	}
	else
	{
		timer0Stop();
		return 0;
     324:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     326:	08 95       	ret

00000328 <startpulse_dht11>:
return void
*************************************************************************/
void startpulse_dht11()
{
	// envia pulso start
	errorRead = 0;
     328:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <errorRead>
	BIT_SET(DDRPORTDHT, PINDATADHT);           //lo configuramos como salida
     32c:	84 b1       	in	r24, 0x04	; 4
     32e:	81 60       	ori	r24, 0x01	; 1
     330:	84 b9       	out	0x04, r24	; 4
	BIT_CLEAR(PORTDATADHT, PINDATADHT);
     332:	85 b1       	in	r24, 0x05	; 5
     334:	8e 7f       	andi	r24, 0xFE	; 254
     336:	85 b9       	out	0x05, r24	; 5
     338:	08 95       	ret

0000033a <read_dht11>:
param float* temperature : retorna la temperatura por referencia
param float* humidity : retorna la humedad por referencia
return unsigned char : retorna un 1 en caso de exito de lectura o cero si hay error
*************************************************************************/
unsigned char read_dht11(float* temperature, float* humidity)
{
     33a:	8f 92       	push	r8
     33c:	9f 92       	push	r9
     33e:	af 92       	push	r10
     340:	bf 92       	push	r11
     342:	cf 92       	push	r12
     344:	df 92       	push	r13
     346:	ef 92       	push	r14
     348:	ff 92       	push	r15
     34a:	1f 93       	push	r17
     34c:	cf 93       	push	r28
     34e:	df 93       	push	r29
     350:	00 d0       	rcall	.+0      	; 0x352 <read_dht11+0x18>
     352:	00 d0       	rcall	.+0      	; 0x354 <read_dht11+0x1a>
     354:	1f 92       	push	r1
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	6c 01       	movw	r12, r24
     35c:	7b 01       	movw	r14, r22
	unsigned char humidyHigh = 0;
     35e:	19 82       	std	Y+1, r1	; 0x01
	unsigned char humidyLow = 0;
     360:	1a 82       	std	Y+2, r1	; 0x02
	unsigned char tempHigh = 0;
     362:	1b 82       	std	Y+3, r1	; 0x03
	unsigned char tempLow = 0;
     364:	1c 82       	std	Y+4, r1	; 0x04
	unsigned char checksum = 0;
     366:	1d 82       	std	Y+5, r1	; 0x05
	
	if (readstart_dht11() == 0)                    // iniciamos el sensor
     368:	0e 94 3b 01 	call	0x276	; 0x276 <readstart_dht11>
     36c:	88 23       	and	r24, r24
     36e:	09 f4       	brne	.+2      	; 0x372 <read_dht11+0x38>
     370:	84 c0       	rjmp	.+264    	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
     372:	10 e0       	ldi	r17, 0x00	; 0
     374:	3b c0       	rjmp	.+118    	; 0x3ec <read_dht11+0xb2>
	}
	
	// leemos los paquetes de 5 bytes
	for (unsigned char l = 0; l < 5; l++)
	{
		switch (l)
     376:	12 30       	cpi	r17, 0x02	; 2
     378:	e9 f0       	breq	.+58     	; 0x3b4 <read_dht11+0x7a>
     37a:	28 f4       	brcc	.+10     	; 0x386 <read_dht11+0x4c>
     37c:	11 23       	and	r17, r17
     37e:	41 f0       	breq	.+16     	; 0x390 <read_dht11+0x56>
     380:	11 30       	cpi	r17, 0x01	; 1
     382:	79 f0       	breq	.+30     	; 0x3a2 <read_dht11+0x68>
     384:	32 c0       	rjmp	.+100    	; 0x3ea <read_dht11+0xb0>
     386:	13 30       	cpi	r17, 0x03	; 3
     388:	f1 f0       	breq	.+60     	; 0x3c6 <read_dht11+0x8c>
     38a:	14 30       	cpi	r17, 0x04	; 4
     38c:	29 f1       	breq	.+74     	; 0x3d8 <read_dht11+0x9e>
     38e:	2d c0       	rjmp	.+90     	; 0x3ea <read_dht11+0xb0>
		{
			case 0:
			{
				readByte(&humidyHigh);
     390:	ce 01       	movw	r24, r28
     392:	01 96       	adiw	r24, 0x01	; 1
     394:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <readByte>
				if (errorRead == 1)           //si ocurrio un error salimos
     398:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <errorRead>
     39c:	81 30       	cpi	r24, 0x01	; 1
     39e:	29 f5       	brne	.+74     	; 0x3ea <read_dht11+0xb0>
     3a0:	63 c0       	rjmp	.+198    	; 0x468 <__EEPROM_REGION_LENGTH__+0x68>
				}
			}
				break;
			case 1:
			{
				readByte(&humidyLow);
     3a2:	ce 01       	movw	r24, r28
     3a4:	02 96       	adiw	r24, 0x02	; 2
     3a6:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <readByte>
				if (errorRead == 1)           //si ocurrio un error salimos
     3aa:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <errorRead>
     3ae:	81 30       	cpi	r24, 0x01	; 1
     3b0:	e1 f4       	brne	.+56     	; 0x3ea <read_dht11+0xb0>
     3b2:	5c c0       	rjmp	.+184    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
				}
			}
				break;
			case 2:
			{
				readByte(&tempHigh);
     3b4:	ce 01       	movw	r24, r28
     3b6:	03 96       	adiw	r24, 0x03	; 3
     3b8:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <readByte>
				if (errorRead == 1)           //si ocurrio un error salimos
     3bc:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <errorRead>
     3c0:	81 30       	cpi	r24, 0x01	; 1
     3c2:	99 f4       	brne	.+38     	; 0x3ea <read_dht11+0xb0>
     3c4:	55 c0       	rjmp	.+170    	; 0x470 <__EEPROM_REGION_LENGTH__+0x70>
				}
			}
				break;
			case 3:
			{
				readByte(&tempLow);
     3c6:	ce 01       	movw	r24, r28
     3c8:	04 96       	adiw	r24, 0x04	; 4
     3ca:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <readByte>
				if (errorRead == 1)           //si ocurrio un error salimos
     3ce:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <errorRead>
     3d2:	81 30       	cpi	r24, 0x01	; 1
     3d4:	51 f4       	brne	.+20     	; 0x3ea <read_dht11+0xb0>
     3d6:	4e c0       	rjmp	.+156    	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
				}
			}
				break;
			case 4:
			{
				readByte(&checksum);
     3d8:	ce 01       	movw	r24, r28
     3da:	05 96       	adiw	r24, 0x05	; 5
     3dc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <readByte>
				if (errorRead == 1)           //si ocurrio un error salimos
     3e0:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <errorRead>
     3e4:	81 30       	cpi	r24, 0x01	; 1
     3e6:	09 f4       	brne	.+2      	; 0x3ea <read_dht11+0xb0>
     3e8:	47 c0       	rjmp	.+142    	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
	{
		return 0;                 // ocurrio un error al inicializar el sensor, salimos
	}
	
	// leemos los paquetes de 5 bytes
	for (unsigned char l = 0; l < 5; l++)
     3ea:	1f 5f       	subi	r17, 0xFF	; 255
     3ec:	15 30       	cpi	r17, 0x05	; 5
     3ee:	18 f2       	brcs	.-122    	; 0x376 <read_dht11+0x3c>
			break;
		}
	}
	
	//armamos las cifras de temp y humedad 
	*temperature = (float)(tempHigh + ((float)tempLow / 100));
     3f0:	6c 81       	ldd	r22, Y+4	; 0x04
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	80 e0       	ldi	r24, 0x00	; 0
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__floatunsisf>
     3fc:	20 e0       	ldi	r18, 0x00	; 0
     3fe:	30 e0       	ldi	r19, 0x00	; 0
     400:	48 ec       	ldi	r20, 0xC8	; 200
     402:	52 e4       	ldi	r21, 0x42	; 66
     404:	0e 94 e7 07 	call	0xfce	; 0xfce <__divsf3>
     408:	4b 01       	movw	r8, r22
     40a:	5c 01       	movw	r10, r24
     40c:	6b 81       	ldd	r22, Y+3	; 0x03
     40e:	70 e0       	ldi	r23, 0x00	; 0
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     418:	a5 01       	movw	r20, r10
     41a:	94 01       	movw	r18, r8
     41c:	0e 94 7b 07 	call	0xef6	; 0xef6 <__addsf3>
     420:	f6 01       	movw	r30, r12
     422:	60 83       	st	Z, r22
     424:	71 83       	std	Z+1, r23	; 0x01
     426:	82 83       	std	Z+2, r24	; 0x02
     428:	93 83       	std	Z+3, r25	; 0x03
	*humidity = (float)(humidyHigh + ((float)humidyLow / 100));
     42a:	6a 81       	ldd	r22, Y+2	; 0x02
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 59 08 	call	0x10b2	; 0x10b2 <__floatunsisf>
     436:	20 e0       	ldi	r18, 0x00	; 0
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	48 ec       	ldi	r20, 0xC8	; 200
     43c:	52 e4       	ldi	r21, 0x42	; 66
     43e:	0e 94 e7 07 	call	0xfce	; 0xfce <__divsf3>
     442:	4b 01       	movw	r8, r22
     444:	5c 01       	movw	r10, r24
     446:	69 81       	ldd	r22, Y+1	; 0x01
     448:	70 e0       	ldi	r23, 0x00	; 0
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <__floatsisf>
     452:	a5 01       	movw	r20, r10
     454:	94 01       	movw	r18, r8
     456:	0e 94 7b 07 	call	0xef6	; 0xef6 <__addsf3>
     45a:	f7 01       	movw	r30, r14
     45c:	60 83       	st	Z, r22
     45e:	71 83       	std	Z+1, r23	; 0x01
     460:	82 83       	std	Z+2, r24	; 0x02
     462:	93 83       	std	Z+3, r25	; 0x03
	
	return 1;
     464:	81 e0       	ldi	r24, 0x01	; 1
     466:	09 c0       	rjmp	.+18     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			case 0:
			{
				readByte(&humidyHigh);
				if (errorRead == 1)           //si ocurrio un error salimos
				{
					return 0;
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	07 c0       	rjmp	.+14     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			case 1:
			{
				readByte(&humidyLow);
				if (errorRead == 1)           //si ocurrio un error salimos
				{
					return 0;
     46c:	80 e0       	ldi	r24, 0x00	; 0
     46e:	05 c0       	rjmp	.+10     	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			case 2:
			{
				readByte(&tempHigh);
				if (errorRead == 1)           //si ocurrio un error salimos
				{
					return 0;
     470:	80 e0       	ldi	r24, 0x00	; 0
     472:	03 c0       	rjmp	.+6      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			case 3:
			{
				readByte(&tempLow);
				if (errorRead == 1)           //si ocurrio un error salimos
				{
					return 0;
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	01 c0       	rjmp	.+2      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
			case 4:
			{
				readByte(&checksum);
				if (errorRead == 1)           //si ocurrio un error salimos
				{
					return 0;
     478:	80 e0       	ldi	r24, 0x00	; 0
	//armamos las cifras de temp y humedad 
	*temperature = (float)(tempHigh + ((float)tempLow / 100));
	*humidity = (float)(humidyHigh + ((float)humidyLow / 100));
	
	return 1;
}
     47a:	0f 90       	pop	r0
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	0f 90       	pop	r0
     484:	df 91       	pop	r29
     486:	cf 91       	pop	r28
     488:	1f 91       	pop	r17
     48a:	ff 90       	pop	r15
     48c:	ef 90       	pop	r14
     48e:	df 90       	pop	r13
     490:	cf 90       	pop	r12
     492:	bf 90       	pop	r11
     494:	af 90       	pop	r10
     496:	9f 90       	pop	r9
     498:	8f 90       	pop	r8
     49a:	08 95       	ret

0000049c <getSubstringGPS>:
param char* strresultado
param
return void
*************************************************************************/
static void getSubstringGPS(char* strcadena, char* strresultado, unsigned char startIndex)
{
     49c:	db 01       	movw	r26, r22
	char* ptrcadena = NULL;
	char* ptresultado = NULL;
	unsigned char contadorComa = 0;
	
	ptrcadena = strcadena + startIndex;
     49e:	fc 01       	movw	r30, r24
     4a0:	e4 0f       	add	r30, r20
     4a2:	f1 1d       	adc	r31, r1
*************************************************************************/
static void getSubstringGPS(char* strcadena, char* strresultado, unsigned char startIndex)
{
	char* ptrcadena = NULL;
	char* ptresultado = NULL;
	unsigned char contadorComa = 0;
     4a4:	30 e0       	ldi	r19, 0x00	; 0
	
	ptrcadena = strcadena + startIndex;
	ptresultado = strresultado;
	
	while (contadorComa < COUNTCOMA)
     4a6:	09 c0       	rjmp	.+18     	; 0x4ba <getSubstringGPS+0x1e>
	{		
	   *ptresultado = *ptrcadena++;
     4a8:	cf 01       	movw	r24, r30
     4aa:	01 96       	adiw	r24, 0x01	; 1
     4ac:	20 81       	ld	r18, Z
     4ae:	2d 93       	st	X+, r18
		ptresultado++;

		if (*ptrcadena == ',')
     4b0:	21 81       	ldd	r18, Z+1	; 0x01
     4b2:	2c 32       	cpi	r18, 0x2C	; 44
     4b4:	09 f4       	brne	.+2      	; 0x4b8 <getSubstringGPS+0x1c>
		{
			contadorComa++;
     4b6:	3f 5f       	subi	r19, 0xFF	; 255
param char* strresultado
param
return void
*************************************************************************/
static void getSubstringGPS(char* strcadena, char* strresultado, unsigned char startIndex)
{
     4b8:	fc 01       	movw	r30, r24
	unsigned char contadorComa = 0;
	
	ptrcadena = strcadena + startIndex;
	ptresultado = strresultado;
	
	while (contadorComa < COUNTCOMA)
     4ba:	38 30       	cpi	r19, 0x08	; 8
     4bc:	a8 f3       	brcs	.-22     	; 0x4a8 <getSubstringGPS+0xc>
		if (*ptrcadena == ',')
		{
			contadorComa++;
		}					
	}
}
     4be:	08 95       	ret

000004c0 <indexOfGPS>:
param char* strcadena
param char* strsearched
return void
*************************************************************************/        
static int indexOfGPS(char* strcadena, char* strsearched)
{
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	ec 01       	movw	r28, r24
	char* ptrresult = NULL;
	int indexresult = -1;
	
	ptrresult = strstr(strcadena, strsearched);
     4c6:	0e 94 13 09 	call	0x1226	; 0x1226 <strstr>
	if (ptrresult != NULL)
     4ca:	00 97       	sbiw	r24, 0x00	; 0
     4cc:	19 f0       	breq	.+6      	; 0x4d4 <indexOfGPS+0x14>
	{
		indexresult = ptrresult - strcadena;
     4ce:	8c 1b       	sub	r24, r28
     4d0:	9d 0b       	sbc	r25, r29
     4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <indexOfGPS+0x18>
return void
*************************************************************************/        
static int indexOfGPS(char* strcadena, char* strsearched)
{
	char* ptrresult = NULL;
	int indexresult = -1;
     4d4:	8f ef       	ldi	r24, 0xFF	; 255
     4d6:	9f ef       	ldi	r25, 0xFF	; 255
	{
		indexresult = ptrresult - strcadena;
	}
	
	return indexresult;
}
     4d8:	df 91       	pop	r29
     4da:	cf 91       	pop	r28
     4dc:	08 95       	ret

000004de <normalizaCoordenadas_v1>:
10723.2692 -> 107.232692
param char* strcoordenadas
return void
*************************************************************************/
void normalizaCoordenadas_v1(char* ptrstrcoordenadas, char* ptreastwest)
{	
     4de:	cf 93       	push	r28
     4e0:	df 93       	push	r29
     4e2:	cd b7       	in	r28, 0x3d	; 61
     4e4:	de b7       	in	r29, 0x3e	; 62
     4e6:	6e 97       	sbiw	r28, 0x1e	; 30
     4e8:	0f b6       	in	r0, 0x3f	; 63
     4ea:	f8 94       	cli
     4ec:	de bf       	out	0x3e, r29	; 62
     4ee:	0f be       	out	0x3f, r0	; 63
     4f0:	cd bf       	out	0x3d, r28	; 61
     4f2:	bc 01       	movw	r22, r24
	char arraycoordenadas[15] = {0};
     4f4:	9f e0       	ldi	r25, 0x0F	; 15
     4f6:	fe 01       	movw	r30, r28
     4f8:	31 96       	adiw	r30, 0x01	; 1
     4fa:	df 01       	movw	r26, r30
     4fc:	89 2f       	mov	r24, r25
     4fe:	1d 92       	st	X+, r1
     500:	8a 95       	dec	r24
     502:	e9 f7       	brne	.-6      	; 0x4fe <normalizaCoordenadas_v1+0x20>
	char arraycoordenadasFinal[15] = {0};
     504:	9e 01       	movw	r18, r28
     506:	20 5f       	subi	r18, 0xF0	; 240
     508:	3f 4f       	sbci	r19, 0xFF	; 255
     50a:	d9 01       	movw	r26, r18
     50c:	1d 92       	st	X+, r1
     50e:	9a 95       	dec	r25
     510:	e9 f7       	brne	.-6      	; 0x50c <normalizaCoordenadas_v1+0x2e>
	char arraystrhorautcsigned[12] = {0};
	unsigned char contadorIndex = 0;
	unsigned char flagpasopunto = 0;	

	strcpy(arraycoordenadas, ptrstrcoordenadas);
     512:	cf 01       	movw	r24, r30
     514:	0e 94 0c 09 	call	0x1218	; 0x1218 <strcpy>
	for (unsigned char indexArr = 0; indexArr <= strlen(arraycoordenadas); indexArr++)           // 10724.24991    1072424991
     518:	80 e0       	ldi	r24, 0x00	; 0
void normalizaCoordenadas_v1(char* ptrstrcoordenadas, char* ptreastwest)
{	
	char arraycoordenadas[15] = {0};
	char arraycoordenadasFinal[15] = {0};
	char arraystrhorautcsigned[12] = {0};
	unsigned char contadorIndex = 0;
     51a:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char flagpasopunto = 0;	

	strcpy(arraycoordenadas, ptrstrcoordenadas);
	for (unsigned char indexArr = 0; indexArr <= strlen(arraycoordenadas); indexArr++)           // 10724.24991    1072424991
     51c:	12 c0       	rjmp	.+36     	; 0x542 <normalizaCoordenadas_v1+0x64>
	{
		if (arraycoordenadas[indexArr] != '.')
     51e:	e1 e0       	ldi	r30, 0x01	; 1
     520:	f0 e0       	ldi	r31, 0x00	; 0
     522:	ec 0f       	add	r30, r28
     524:	fd 1f       	adc	r31, r29
     526:	e8 0f       	add	r30, r24
     528:	f1 1d       	adc	r31, r1
     52a:	20 81       	ld	r18, Z
     52c:	2e 32       	cpi	r18, 0x2E	; 46
     52e:	41 f0       	breq	.+16     	; 0x540 <normalizaCoordenadas_v1+0x62>
		{
			arraycoordenadasFinal[contadorIndex] = arraycoordenadas[indexArr];
     530:	e0 e1       	ldi	r30, 0x10	; 16
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	ec 0f       	add	r30, r28
     536:	fd 1f       	adc	r31, r29
     538:	e9 0f       	add	r30, r25
     53a:	f1 1d       	adc	r31, r1
     53c:	20 83       	st	Z, r18
			contadorIndex++;
     53e:	9f 5f       	subi	r25, 0xFF	; 255
	char arraystrhorautcsigned[12] = {0};
	unsigned char contadorIndex = 0;
	unsigned char flagpasopunto = 0;	

	strcpy(arraycoordenadas, ptrstrcoordenadas);
	for (unsigned char indexArr = 0; indexArr <= strlen(arraycoordenadas); indexArr++)           // 10724.24991    1072424991
     540:	8f 5f       	subi	r24, 0xFF	; 255
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	de 01       	movw	r26, r28
     548:	11 96       	adiw	r26, 0x01	; 1
     54a:	fd 01       	movw	r30, r26
     54c:	01 90       	ld	r0, Z+
     54e:	00 20       	and	r0, r0
     550:	e9 f7       	brne	.-6      	; 0x54c <normalizaCoordenadas_v1+0x6e>
     552:	31 97       	sbiw	r30, 0x01	; 1
     554:	ea 1b       	sub	r30, r26
     556:	fb 0b       	sbc	r31, r27
     558:	e2 17       	cp	r30, r18
     55a:	f3 07       	cpc	r31, r19
     55c:	00 f7       	brcc	.-64     	; 0x51e <normalizaCoordenadas_v1+0x40>
			arraycoordenadasFinal[contadorIndex] = arraycoordenadas[indexArr];
			contadorIndex++;
		}
	}

	strcpy(arraycoordenadas, arraycoordenadasFinal);
     55e:	8e 01       	movw	r16, r28
     560:	00 5f       	subi	r16, 0xF0	; 240
     562:	1f 4f       	sbci	r17, 0xFF	; 255
     564:	b8 01       	movw	r22, r16
     566:	cd 01       	movw	r24, r26
     568:	0e 94 0c 09 	call	0x1218	; 0x1218 <strcpy>
	memset(arraycoordenadasFinal, 0, sizeof(arraycoordenadasFinal));
     56c:	8f e0       	ldi	r24, 0x0F	; 15
     56e:	f8 01       	movw	r30, r16
     570:	11 92       	st	Z+, r1
     572:	8a 95       	dec	r24
     574:	e9 f7       	brne	.-6      	; 0x570 <normalizaCoordenadas_v1+0x92>
			flagpasopunto = 1;
		}

		contadorIndex++;
		indexArr--;
	}
     576:	ff cf       	rjmp	.-2      	; 0x576 <normalizaCoordenadas_v1+0x98>

00000578 <getCoordenadasGPS>:
param char* serialbuffer
param struct dataGPS*
return void
*************************************************************************/
unsigned char getCoordenadasGPS(char* serialbuffer, struct dataGPS* datagps)
{
     578:	ef 92       	push	r14
     57a:	ff 92       	push	r15
     57c:	0f 93       	push	r16
     57e:	1f 93       	push	r17
     580:	cf 93       	push	r28
     582:	df 93       	push	r29
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
     588:	c0 55       	subi	r28, 0x50	; 80
     58a:	d1 09       	sbc	r29, r1
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	8c 01       	movw	r16, r24
     598:	7b 01       	movw	r14, r22
	char arrayGPRMC[ARRAYGPRMCSIZE] = {0};
     59a:	fe 01       	movw	r30, r28
     59c:	31 96       	adiw	r30, 0x01	; 1
     59e:	80 e5       	ldi	r24, 0x50	; 80
     5a0:	df 01       	movw	r26, r30
     5a2:	1d 92       	st	X+, r1
     5a4:	8a 95       	dec	r24
     5a6:	e9 f7       	brne	.-6      	; 0x5a2 <getCoordenadasGPS+0x2a>
	int indiceGPRMC = 0;
	unsigned char indiceSplitComa = 0;
	char* splitArray = "";
	
    // memset(arrayGPRMC, 0, sizeof(arrayGPRMC));
	indiceGPRMC = indexOfGPS(serialbuffer, "GPRMC");
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	71 e0       	ldi	r23, 0x01	; 1
     5ac:	c8 01       	movw	r24, r16
     5ae:	0e 94 60 02 	call	0x4c0	; 0x4c0 <indexOfGPS>
	
	if (indiceGPRMC != -1)                                                 // si encontro la cadena GPRMC, continua
     5b2:	8f 3f       	cpi	r24, 0xFF	; 255
     5b4:	bf ef       	ldi	r27, 0xFF	; 255
     5b6:	9b 07       	cpc	r25, r27
     5b8:	09 f4       	brne	.+2      	; 0x5bc <getCoordenadasGPS+0x44>
     5ba:	70 c0       	rjmp	.+224    	; 0x69c <getCoordenadasGPS+0x124>
	{
		getSubstringGPS(serialbuffer, arrayGPRMC, indiceGPRMC);            // GPRMC,225446,A,4916.45,N,12311.12,W,000.5
     5bc:	48 2f       	mov	r20, r24
     5be:	be 01       	movw	r22, r28
     5c0:	6f 5f       	subi	r22, 0xFF	; 255
     5c2:	7f 4f       	sbci	r23, 0xFF	; 255
     5c4:	c8 01       	movw	r24, r16
     5c6:	0e 94 4e 02 	call	0x49c	; 0x49c <getSubstringGPS>
		splitArray = strtok(arrayGPRMC, ",");
     5ca:	66 e0       	ldi	r22, 0x06	; 6
     5cc:	71 e0       	ldi	r23, 0x01	; 1
     5ce:	ce 01       	movw	r24, r28
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	0e 94 07 09 	call	0x120e	; 0x120e <strtok>
*************************************************************************/
unsigned char getCoordenadasGPS(char* serialbuffer, struct dataGPS* datagps)
{
	char arrayGPRMC[ARRAYGPRMCSIZE] = {0};
	int indiceGPRMC = 0;
	unsigned char indiceSplitComa = 0;
     5d6:	10 e0       	ldi	r17, 0x00	; 0
	
	if (indiceGPRMC != -1)                                                 // si encontro la cadena GPRMC, continua
	{
		getSubstringGPS(serialbuffer, arrayGPRMC, indiceGPRMC);            // GPRMC,225446,A,4916.45,N,12311.12,W,000.5
		splitArray = strtok(arrayGPRMC, ",");
		while (splitArray != NULL)
     5d8:	30 c0       	rjmp	.+96     	; 0x63a <getCoordenadasGPS+0xc2>
		{
			switch (indiceSplitComa)
     5da:	15 30       	cpi	r17, 0x05	; 5
     5dc:	b1 f0       	breq	.+44     	; 0x60a <getCoordenadasGPS+0x92>
     5de:	28 f4       	brcc	.+10     	; 0x5ea <getCoordenadasGPS+0x72>
     5e0:	11 30       	cpi	r17, 0x01	; 1
     5e2:	41 f0       	breq	.+16     	; 0x5f4 <getCoordenadasGPS+0x7c>
     5e4:	13 30       	cpi	r17, 0x03	; 3
     5e6:	59 f0       	breq	.+22     	; 0x5fe <getCoordenadasGPS+0x86>
     5e8:	21 c0       	rjmp	.+66     	; 0x62c <getCoordenadasGPS+0xb4>
     5ea:	16 30       	cpi	r17, 0x06	; 6
     5ec:	a1 f0       	breq	.+40     	; 0x616 <getCoordenadasGPS+0x9e>
     5ee:	17 30       	cpi	r17, 0x07	; 7
     5f0:	c1 f0       	breq	.+48     	; 0x622 <getCoordenadasGPS+0xaa>
     5f2:	1c c0       	rjmp	.+56     	; 0x62c <getCoordenadasGPS+0xb4>
			{
				case INDICEHORA :
					strcpy(datagps->horaact, splitArray);
     5f4:	bc 01       	movw	r22, r24
     5f6:	c7 01       	movw	r24, r14
     5f8:	0e 94 0c 09 	call	0x1218	; 0x1218 <strcpy>
				break;
     5fc:	17 c0       	rjmp	.+46     	; 0x62c <getCoordenadasGPS+0xb4>
				case INDICELAT :
					strcpy(datagps->latitud, splitArray);
     5fe:	bc 01       	movw	r22, r24
     600:	c7 01       	movw	r24, r14
     602:	44 96       	adiw	r24, 0x14	; 20
     604:	0e 94 0c 09 	call	0x1218	; 0x1218 <strcpy>
				break;
     608:	11 c0       	rjmp	.+34     	; 0x62c <getCoordenadasGPS+0xb4>
				case INDICELON :
					strcpy(datagps->longitud, splitArray);
     60a:	bc 01       	movw	r22, r24
     60c:	c7 01       	movw	r24, r14
     60e:	88 96       	adiw	r24, 0x28	; 40
     610:	0e 94 0c 09 	call	0x1218	; 0x1218 <strcpy>
				break;
     614:	0b c0       	rjmp	.+22     	; 0x62c <getCoordenadasGPS+0xb4>
				case INDICEEASTWEST :
					strcpy(datagps->eastwest, splitArray);
     616:	bc 01       	movw	r22, r24
     618:	c7 01       	movw	r24, r14
     61a:	cc 96       	adiw	r24, 0x3c	; 60
     61c:	0e 94 0c 09 	call	0x1218	; 0x1218 <strcpy>
				break;
     620:	05 c0       	rjmp	.+10     	; 0x62c <getCoordenadasGPS+0xb4>
				case INDICESPEED :
					strcpy(datagps->speed, splitArray);
     622:	bc 01       	movw	r22, r24
     624:	c7 01       	movw	r24, r14
     626:	cf 96       	adiw	r24, 0x3f	; 63
     628:	0e 94 0c 09 	call	0x1218	; 0x1218 <strcpy>
				break;
			}
			
			splitArray = strtok(NULL, ",");
     62c:	66 e0       	ldi	r22, 0x06	; 6
     62e:	71 e0       	ldi	r23, 0x01	; 1
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	0e 94 07 09 	call	0x120e	; 0x120e <strtok>
			indiceSplitComa++;
     638:	1f 5f       	subi	r17, 0xFF	; 255
	
	if (indiceGPRMC != -1)                                                 // si encontro la cadena GPRMC, continua
	{
		getSubstringGPS(serialbuffer, arrayGPRMC, indiceGPRMC);            // GPRMC,225446,A,4916.45,N,12311.12,W,000.5
		splitArray = strtok(arrayGPRMC, ",");
		while (splitArray != NULL)
     63a:	00 97       	sbiw	r24, 0x00	; 0
     63c:	71 f6       	brne	.-100    	; 0x5da <getCoordenadasGPS+0x62>
			
			splitArray = strtok(NULL, ",");
			indiceSplitComa++;
		}
		
		if (strlen(datagps->latitud) > 0 && strlen(datagps->longitud) > 0 && strlen(datagps->eastwest) > 0 && strlen(datagps->horaact) > 0)
     63e:	f7 01       	movw	r30, r14
     640:	84 89       	ldd	r24, Z+20	; 0x14
     642:	88 23       	and	r24, r24
     644:	79 f0       	breq	.+30     	; 0x664 <getCoordenadasGPS+0xec>
     646:	80 a5       	ldd	r24, Z+40	; 0x28
     648:	88 23       	and	r24, r24
     64a:	61 f0       	breq	.+24     	; 0x664 <getCoordenadasGPS+0xec>
     64c:	84 ad       	ldd	r24, Z+60	; 0x3c
     64e:	88 23       	and	r24, r24
     650:	49 f0       	breq	.+18     	; 0x664 <getCoordenadasGPS+0xec>
     652:	80 81       	ld	r24, Z
     654:	88 23       	and	r24, r24
     656:	31 f0       	breq	.+12     	; 0x664 <getCoordenadasGPS+0xec>
		{
			normalizaCoordenadas_v1(datagps->latitud, "");
     658:	61 e3       	ldi	r22, 0x31	; 49
     65a:	71 e0       	ldi	r23, 0x01	; 1
     65c:	c7 01       	movw	r24, r14
     65e:	44 96       	adiw	r24, 0x14	; 20
     660:	0e 94 6f 02 	call	0x4de	; 0x4de <normalizaCoordenadas_v1>
			normalizaCoordenadas_v1(datagps->longitud, datagps->eastwest);
			normalizaHoraUTC(datagps->horaact);
		}
		else
		{
			sprintf(datagps->latitud, "SINDATOS");
     664:	d7 01       	movw	r26, r14
     666:	54 96       	adiw	r26, 0x14	; 20
     668:	89 e0       	ldi	r24, 0x09	; 9
     66a:	e8 e0       	ldi	r30, 0x08	; 8
     66c:	f1 e0       	ldi	r31, 0x01	; 1
     66e:	01 90       	ld	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	8a 95       	dec	r24
     674:	e1 f7       	brne	.-8      	; 0x66e <getCoordenadasGPS+0xf6>
			sprintf(datagps->longitud, "SINDATOS");
     676:	d7 01       	movw	r26, r14
     678:	98 96       	adiw	r26, 0x28	; 40
     67a:	89 e0       	ldi	r24, 0x09	; 9
     67c:	e8 e0       	ldi	r30, 0x08	; 8
     67e:	f1 e0       	ldi	r31, 0x01	; 1
     680:	01 90       	ld	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	8a 95       	dec	r24
     686:	e1 f7       	brne	.-8      	; 0x680 <getCoordenadasGPS+0x108>
			sprintf(datagps->horaact, "SINDATOS");
     688:	89 e0       	ldi	r24, 0x09	; 9
     68a:	e8 e0       	ldi	r30, 0x08	; 8
     68c:	f1 e0       	ldi	r31, 0x01	; 1
     68e:	d7 01       	movw	r26, r14
     690:	01 90       	ld	r0, Z+
     692:	0d 92       	st	X+, r0
     694:	8a 95       	dec	r24
     696:	e1 f7       	brne	.-8      	; 0x690 <getCoordenadasGPS+0x118>
			indiceGPRMC = -1;
     698:	8f ef       	ldi	r24, 0xFF	; 255
     69a:	9f ef       	ldi	r25, 0xFF	; 255
		}		
	}
	
	return indiceGPRMC;
}
     69c:	c0 5b       	subi	r28, 0xB0	; 176
     69e:	df 4f       	sbci	r29, 0xFF	; 255
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	1f 91       	pop	r17
     6b0:	0f 91       	pop	r16
     6b2:	ff 90       	pop	r15
     6b4:	ef 90       	pop	r14
     6b6:	08 95       	ret

000006b8 <i2c_init>:
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
}
     6b8:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     6bc:	88 e4       	ldi	r24, 0x48	; 72
     6be:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
     6c2:	08 95       	ret

000006c4 <i2c_start>:
     6c4:	94 ea       	ldi	r25, 0xA4	; 164
     6c6:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     6ca:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     6ce:	99 23       	and	r25, r25
     6d0:	e4 f7       	brge	.-8      	; 0x6ca <i2c_start+0x6>
     6d2:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     6d6:	98 7f       	andi	r25, 0xF8	; 248
     6d8:	98 30       	cpi	r25, 0x08	; 8
     6da:	11 f0       	breq	.+4      	; 0x6e0 <i2c_start+0x1c>
     6dc:	90 31       	cpi	r25, 0x10	; 16
     6de:	91 f4       	brne	.+36     	; 0x704 <i2c_start+0x40>
     6e0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
     6e4:	84 e8       	ldi	r24, 0x84	; 132
     6e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     6ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     6ee:	88 23       	and	r24, r24
     6f0:	e4 f7       	brge	.-8      	; 0x6ea <i2c_start+0x26>
     6f2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     6f6:	88 7f       	andi	r24, 0xF8	; 248
     6f8:	88 31       	cpi	r24, 0x18	; 24
     6fa:	31 f0       	breq	.+12     	; 0x708 <i2c_start+0x44>
     6fc:	80 34       	cpi	r24, 0x40	; 64
     6fe:	31 f4       	brne	.+12     	; 0x70c <i2c_start+0x48>
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	08 95       	ret
     704:	81 e0       	ldi	r24, 0x01	; 1
     706:	08 95       	ret
     708:	80 e0       	ldi	r24, 0x00	; 0
     70a:	08 95       	ret
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	08 95       	ret

00000710 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     710:	84 e9       	ldi	r24, 0x94	; 148
     712:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
     716:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     71a:	84 fd       	sbrc	r24, 4
     71c:	fc cf       	rjmp	.-8      	; 0x716 <i2c_stop+0x6>
}
     71e:	08 95       	ret

00000720 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    unsigned char   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     720:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
     724:	84 e8       	ldi	r24, 0x84	; 132
     726:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
     72a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
     72e:	88 23       	and	r24, r24
     730:	e4 f7       	brge	.-8      	; 0x72a <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     732:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
     736:	88 7f       	andi	r24, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     738:	88 32       	cpi	r24, 0x28	; 40
     73a:	11 f0       	breq	.+4      	; 0x740 <i2c_write+0x20>
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	08 95       	ret
	return 0;
     740:	80 e0       	ldi	r24, 0x00	; 0
}
     742:	08 95       	ret

00000744 <lcd_i2c_write>:
Envia el nibble mediante el I2C
param unsigned char : msj
return void
*************************************************************************/
static void lcd_i2c_write(unsigned char msj)
{
     744:	cf 93       	push	r28
     746:	c8 2f       	mov	r28, r24
	i2c_start(LCD_I2C_ADDRESS);
     748:	8e e4       	ldi	r24, 0x4E	; 78
     74a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <i2c_start>
	i2c_write(msj);
     74e:	8c 2f       	mov	r24, r28
     750:	0e 94 90 03 	call	0x720	; 0x720 <i2c_write>
	i2c_stop();
     754:	0e 94 88 03 	call	0x710	; 0x710 <i2c_stop>
}
     758:	cf 91       	pop	r28
     75a:	08 95       	ret

0000075c <lcd_write_4Bit>:
Envia el nibble hacia el 74hc595
param unsigned char : nibble
return void
*************************************************************************/
static void lcd_write_4Bit(unsigned char nibble)
{
     75c:	cf 93       	push	r28
	nibble |= RS;
     75e:	c0 91 36 01 	lds	r28, 0x0136	; 0x800136 <RS>
     762:	c8 2b       	or	r28, r24
	lcd_i2c_write(nibble | 0x04);
     764:	8c 2f       	mov	r24, r28
     766:	84 60       	ori	r24, 0x04	; 4
     768:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_i2c_write>
     76c:	8f e3       	ldi	r24, 0x3F	; 63
     76e:	91 e0       	ldi	r25, 0x01	; 1
     770:	01 97       	sbiw	r24, 0x01	; 1
     772:	f1 f7       	brne	.-4      	; 0x770 <lcd_write_4Bit+0x14>
     774:	00 c0       	rjmp	.+0      	; 0x776 <lcd_write_4Bit+0x1a>
     776:	00 00       	nop
	_delay_us(80);
	lcd_i2c_write(nibble & 0xFB);
     778:	8c 2f       	mov	r24, r28
     77a:	8b 7f       	andi	r24, 0xFB	; 251
     77c:	0e 94 a2 03 	call	0x744	; 0x744 <lcd_i2c_write>
     780:	8f e3       	ldi	r24, 0x3F	; 63
     782:	91 e0       	ldi	r25, 0x01	; 1
     784:	01 97       	sbiw	r24, 0x01	; 1
     786:	f1 f7       	brne	.-4      	; 0x784 <lcd_write_4Bit+0x28>
     788:	00 c0       	rjmp	.+0      	; 0x78a <lcd_write_4Bit+0x2e>
     78a:	00 00       	nop
	_delay_us(80);
}
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <lcd_cmd>:
Recibe el comando
unsigned char : cmd
return void
*************************************************************************/
static void lcd_cmd(const unsigned char cmd)
{
     790:	cf 93       	push	r28
     792:	c8 2f       	mov	r28, r24
	RS = 0; // Command Register Select
     794:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <RS>
	lcd_write_4Bit(cmd & 0xF0);
     798:	80 7f       	andi	r24, 0xF0	; 240
     79a:	0e 94 ae 03 	call	0x75c	; 0x75c <lcd_write_4Bit>
    lcd_write_4Bit((cmd << 4) & 0xF0);
     79e:	8c 2f       	mov	r24, r28
     7a0:	82 95       	swap	r24
     7a2:	80 7f       	andi	r24, 0xF0	; 240
     7a4:	0e 94 ae 03 	call	0x75c	; 0x75c <lcd_write_4Bit>
}
     7a8:	cf 91       	pop	r28
     7aa:	08 95       	ret

000007ac <lcd_write_char>:
Recibe un char y lo divide en nibble alto y bajo
param char : c
return void
*************************************************************************/
static void lcd_write_char(const char data)
{
     7ac:	cf 93       	push	r28
     7ae:	c8 2f       	mov	r28, r24
	RS = 1;          // data register select
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <RS>
	lcd_write_4Bit(data & 0xF0);
     7b6:	8c 2f       	mov	r24, r28
     7b8:	80 7f       	andi	r24, 0xF0	; 240
     7ba:	0e 94 ae 03 	call	0x75c	; 0x75c <lcd_write_4Bit>
	lcd_write_4Bit((data << 4) & 0xF0);
     7be:	8c 2f       	mov	r24, r28
     7c0:	82 95       	swap	r24
     7c2:	80 7f       	andi	r24, 0xF0	; 240
     7c4:	0e 94 ae 03 	call	0x75c	; 0x75c <lcd_write_4Bit>
}
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <lcd_init>:
param none
return void
*************************************************************************/
void lcd_init()
{
	i2c_init();
     7cc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7d0:	2f ef       	ldi	r18, 0xFF	; 255
     7d2:	86 e7       	ldi	r24, 0x76	; 118
     7d4:	91 e0       	ldi	r25, 0x01	; 1
     7d6:	21 50       	subi	r18, 0x01	; 1
     7d8:	80 40       	sbci	r24, 0x00	; 0
     7da:	90 40       	sbci	r25, 0x00	; 0
     7dc:	e1 f7       	brne	.-8      	; 0x7d6 <lcd_init+0xa>
     7de:	00 c0       	rjmp	.+0      	; 0x7e0 <lcd_init+0x14>
     7e0:	00 00       	nop
    _delay_ms(30);
    lcd_cmd(0x03);
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
     7e8:	8f e1       	ldi	r24, 0x1F	; 31
     7ea:	9e e4       	ldi	r25, 0x4E	; 78
     7ec:	01 97       	sbiw	r24, 0x01	; 1
     7ee:	f1 f7       	brne	.-4      	; 0x7ec <lcd_init+0x20>
     7f0:	00 c0       	rjmp	.+0      	; 0x7f2 <lcd_init+0x26>
     7f2:	00 00       	nop
    _delay_ms(5);
    lcd_cmd(0x03);
     7f4:	83 e0       	ldi	r24, 0x03	; 3
     7f6:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
     7fa:	8f e1       	ldi	r24, 0x1F	; 31
     7fc:	9e e4       	ldi	r25, 0x4E	; 78
     7fe:	01 97       	sbiw	r24, 0x01	; 1
     800:	f1 f7       	brne	.-4      	; 0x7fe <lcd_init+0x32>
     802:	00 c0       	rjmp	.+0      	; 0x804 <__DATA_REGION_LENGTH__+0x4>
     804:	00 00       	nop
    _delay_ms(5);
    lcd_cmd(0x03);
     806:	83 e0       	ldi	r24, 0x03	; 3
     808:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
     80c:	8f e1       	ldi	r24, 0x1F	; 31
     80e:	9e e4       	ldi	r25, 0x4E	; 78
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	f1 f7       	brne	.-4      	; 0x810 <__DATA_REGION_LENGTH__+0x10>
     814:	00 c0       	rjmp	.+0      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
     816:	00 00       	nop
    _delay_ms(5);
    lcd_cmd(LCD_RETURN_HOME);
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
     81e:	8f e1       	ldi	r24, 0x1F	; 31
     820:	9e e4       	ldi	r25, 0x4E	; 78
     822:	01 97       	sbiw	r24, 0x01	; 1
     824:	f1 f7       	brne	.-4      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
     826:	00 c0       	rjmp	.+0      	; 0x828 <__DATA_REGION_LENGTH__+0x28>
     828:	00 00       	nop
    _delay_ms(5);
    lcd_cmd(0x20 | (LCD_TYPE << 2));
     82a:	88 e2       	ldi	r24, 0x28	; 40
     82c:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
     830:	9f ef       	ldi	r25, 0xFF	; 255
     832:	20 e7       	ldi	r18, 0x70	; 112
     834:	82 e0       	ldi	r24, 0x02	; 2
     836:	91 50       	subi	r25, 0x01	; 1
     838:	20 40       	sbci	r18, 0x00	; 0
     83a:	80 40       	sbci	r24, 0x00	; 0
     83c:	e1 f7       	brne	.-8      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     83e:	00 c0       	rjmp	.+0      	; 0x840 <__DATA_REGION_LENGTH__+0x40>
     840:	00 00       	nop
    _delay_ms(50);
    lcd_cmd(LCD_TURN_ON);
     842:	8c e0       	ldi	r24, 0x0C	; 12
     844:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
     848:	9f ef       	ldi	r25, 0xFF	; 255
     84a:	20 e7       	ldi	r18, 0x70	; 112
     84c:	82 e0       	ldi	r24, 0x02	; 2
     84e:	91 50       	subi	r25, 0x01	; 1
     850:	20 40       	sbci	r18, 0x00	; 0
     852:	80 40       	sbci	r24, 0x00	; 0
     854:	e1 f7       	brne	.-8      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
     856:	00 c0       	rjmp	.+0      	; 0x858 <__DATA_REGION_LENGTH__+0x58>
     858:	00 00       	nop
    _delay_ms(50);
    lcd_cmd(LCD_CLEAR);
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
     860:	9f ef       	ldi	r25, 0xFF	; 255
     862:	20 e7       	ldi	r18, 0x70	; 112
     864:	82 e0       	ldi	r24, 0x02	; 2
     866:	91 50       	subi	r25, 0x01	; 1
     868:	20 40       	sbci	r18, 0x00	; 0
     86a:	80 40       	sbci	r24, 0x00	; 0
     86c:	e1 f7       	brne	.-8      	; 0x866 <__DATA_REGION_LENGTH__+0x66>
     86e:	00 c0       	rjmp	.+0      	; 0x870 <__DATA_REGION_LENGTH__+0x70>
     870:	00 00       	nop
    _delay_ms(50);
    lcd_cmd(LCD_ENTRY_MODE_SET | LCD_RETURN_HOME);
     872:	86 e0       	ldi	r24, 0x06	; 6
     874:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
     878:	9f ef       	ldi	r25, 0xFF	; 255
     87a:	20 e7       	ldi	r18, 0x70	; 112
     87c:	82 e0       	ldi	r24, 0x02	; 2
     87e:	91 50       	subi	r25, 0x01	; 1
     880:	20 40       	sbci	r18, 0x00	; 0
     882:	80 40       	sbci	r24, 0x00	; 0
     884:	e1 f7       	brne	.-8      	; 0x87e <__DATA_REGION_LENGTH__+0x7e>
     886:	00 c0       	rjmp	.+0      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
     888:	00 00       	nop
     88a:	08 95       	ret

0000088c <lcd_write_string>:
Recibe un string y lo separa en caracteres
param char* : str
return void
*************************************************************************/
void lcd_write_string(const char* str)
{
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	8c 01       	movw	r16, r24
	for(int i=0; str[i]!='\0'; i++)
     896:	c0 e0       	ldi	r28, 0x00	; 0
     898:	d0 e0       	ldi	r29, 0x00	; 0
     89a:	03 c0       	rjmp	.+6      	; 0x8a2 <lcd_write_string+0x16>
	{
		lcd_write_char(str[i]);
     89c:	0e 94 d6 03 	call	0x7ac	; 0x7ac <lcd_write_char>
param char* : str
return void
*************************************************************************/
void lcd_write_string(const char* str)
{
	for(int i=0; str[i]!='\0'; i++)
     8a0:	21 96       	adiw	r28, 0x01	; 1
     8a2:	f8 01       	movw	r30, r16
     8a4:	ec 0f       	add	r30, r28
     8a6:	fd 1f       	adc	r31, r29
     8a8:	80 81       	ld	r24, Z
     8aa:	81 11       	cpse	r24, r1
     8ac:	f7 cf       	rjmp	.-18     	; 0x89c <lcd_write_string+0x10>
	{
		lcd_write_char(str[i]);
	}    
}
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	08 95       	ret

000008b8 <lcd_set_cursor>:
param unsigned char : col, columna
return void
*************************************************************************/
void lcd_set_cursor(const unsigned char row, const unsigned char col)
{
	switch(row) 
     8b8:	83 30       	cpi	r24, 0x03	; 3
     8ba:	49 f0       	breq	.+18     	; 0x8ce <lcd_set_cursor+0x16>
     8bc:	84 30       	cpi	r24, 0x04	; 4
     8be:	61 f0       	breq	.+24     	; 0x8d8 <lcd_set_cursor+0x20>
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	79 f4       	brne	.+30     	; 0x8e2 <lcd_set_cursor+0x2a>
	{
		case 2:
			lcd_cmd(0xC0 + col-1);
     8c4:	8f eb       	ldi	r24, 0xBF	; 191
     8c6:	86 0f       	add	r24, r22
     8c8:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
		break;
     8cc:	08 95       	ret
		case 3:
			lcd_cmd(0x94 + col-1);
     8ce:	83 e9       	ldi	r24, 0x93	; 147
     8d0:	86 0f       	add	r24, r22
     8d2:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
		break;
     8d6:	08 95       	ret
		case 4:
			lcd_cmd(0xD4 + col-1);
     8d8:	83 ed       	ldi	r24, 0xD3	; 211
     8da:	86 0f       	add	r24, r22
     8dc:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
		break;
     8e0:	08 95       	ret
		// Case 1
		default:
			lcd_cmd(0x80 + col-1);
     8e2:	8f e7       	ldi	r24, 0x7F	; 127
     8e4:	86 0f       	add	r24, r22
     8e6:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
     8ea:	08 95       	ret

000008ec <lcd_clear>:
Borra el contenido de la pantalla
return void
*************************************************************************/
void lcd_clear()
{
	lcd_cmd(0x01);
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	0e 94 c8 03 	call	0x790	; 0x790 <lcd_cmd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8f2:	85 ed       	ldi	r24, 0xD5	; 213
     8f4:	8a 95       	dec	r24
     8f6:	f1 f7       	brne	.-4      	; 0x8f4 <lcd_clear+0x8>
     8f8:	00 00       	nop
     8fa:	08 95       	ret

000008fc <main>:
char rx_buffer[RX_BUFFER_SIZE];
volatile unsigned char uartmsg;
void print_lcd_dht11(float temperture, float humidyty);

int main(void)
{    
     8fc:	cf 93       	push	r28
     8fe:	df 93       	push	r29
     900:	cd b7       	in	r28, 0x3d	; 61
     902:	de b7       	in	r29, 0x3e	; 62
     904:	cd 53       	subi	r28, 0x3D	; 61
     906:	d1 40       	sbci	r29, 0x01	; 1
     908:	0f b6       	in	r0, 0x3f	; 63
     90a:	f8 94       	cli
     90c:	de bf       	out	0x3e, r29	; 62
     90e:	0f be       	out	0x3f, r0	; 63
     910:	cd bf       	out	0x3d, r28	; 61
	
	// variables para el task led blink 250ms
	const unsigned int periodo_exec_ledblink = 250;       // para 250ms
	unsigned long current_count_ledblink_exec = 0;
	
	float temperatureDht = 0.0;
     912:	19 82       	std	Y+1, r1	; 0x01
     914:	1a 82       	std	Y+2, r1	; 0x02
     916:	1b 82       	std	Y+3, r1	; 0x03
     918:	1c 82       	std	Y+4, r1	; 0x04
	float humedadDht = 0.0;
     91a:	1d 82       	std	Y+5, r1	; 0x05
     91c:	1e 82       	std	Y+6, r1	; 0x06
     91e:	1f 82       	std	Y+7, r1	; 0x07
     920:	18 86       	std	Y+8, r1	; 0x08
		
	struct dataGPS dataGPSread = {0};
     922:	fe 01       	movw	r30, r28
     924:	39 96       	adiw	r30, 0x09	; 9
     926:	83 e5       	ldi	r24, 0x53	; 83
     928:	df 01       	movw	r26, r30
     92a:	1d 92       	st	X+, r1
     92c:	8a 95       	dec	r24
     92e:	e9 f7       	brne	.-6      	; 0x92a <__stack+0x2b>
	char arrayTemp[6] = {0};	
     930:	ed 5a       	subi	r30, 0xAD	; 173
     932:	ff 4f       	sbci	r31, 0xFF	; 255
     934:	86 e0       	ldi	r24, 0x06	; 6
     936:	df 01       	movw	r26, r30
     938:	28 2f       	mov	r18, r24
     93a:	1d 92       	st	X+, r1
     93c:	2a 95       	dec	r18
     93e:	e9 f7       	brne	.-6      	; 0x93a <__stack+0x3b>
	char arrayHumedad[6] = {0};  
     940:	36 96       	adiw	r30, 0x06	; 6
     942:	df 01       	movw	r26, r30
     944:	1d 92       	st	X+, r1
     946:	8a 95       	dec	r24
     948:	e9 f7       	brne	.-6      	; 0x944 <__stack+0x45>
	char arrayLcdHora[24] = {0};
     94a:	36 96       	adiw	r30, 0x06	; 6
     94c:	88 e1       	ldi	r24, 0x18	; 24
     94e:	df 01       	movw	r26, r30
     950:	1d 92       	st	X+, r1
     952:	8a 95       	dec	r24
     954:	e9 f7       	brne	.-6      	; 0x950 <__stack+0x51>
	char arrayLoraMsj[120] = {0};
     956:	78 96       	adiw	r30, 0x18	; 24
     958:	88 e7       	ldi	r24, 0x78	; 120
     95a:	df 01       	movw	r26, r30
     95c:	1d 92       	st	X+, r1
     95e:	8a 95       	dec	r24
     960:	e9 f7       	brne	.-6      	; 0x95c <__stack+0x5d>
		
	char arrayLatitud[22] = {0};
     962:	e8 58       	subi	r30, 0x88	; 136
     964:	ff 4f       	sbci	r31, 0xFF	; 255
     966:	86 e1       	ldi	r24, 0x16	; 22
     968:	df 01       	movw	r26, r30
     96a:	28 2f       	mov	r18, r24
     96c:	1d 92       	st	X+, r1
     96e:	2a 95       	dec	r18
     970:	e9 f7       	brne	.-6      	; 0x96c <__stack+0x6d>
	char arrayLongitud[22] = {0};
     972:	76 96       	adiw	r30, 0x16	; 22
     974:	df 01       	movw	r26, r30
     976:	28 2f       	mov	r18, r24
     978:	1d 92       	st	X+, r1
     97a:	2a 95       	dec	r18
     97c:	e9 f7       	brne	.-6      	; 0x978 <__stack+0x79>
	char arrayVelocidad[22] = {0};
     97e:	76 96       	adiw	r30, 0x16	; 22
     980:	df 01       	movw	r26, r30
     982:	1d 92       	st	X+, r1
     984:	8a 95       	dec	r24
     986:	e9 f7       	brne	.-6      	; 0x982 <__stack+0x83>
	
	BIT_SET(DDR_LED_BLINK_LORA, PIN_LED_BLINK_LORA);
     988:	84 b1       	in	r24, 0x04	; 4
     98a:	82 60       	ori	r24, 0x02	; 2
     98c:	84 b9       	out	0x04, r24	; 4
	BIT_CLEAR(PORT_LED_BLINK_LORA, PIN_LED_BLINK_LORA);
     98e:	85 b1       	in	r24, 0x05	; 5
     990:	8d 7f       	andi	r24, 0xFD	; 253
     992:	85 b9       	out	0x05, r24	; 5
	BIT_SET(DDR_LED_BLINK_GPS, PIN_LED_BLINK_GPS);
     994:	84 b1       	in	r24, 0x04	; 4
     996:	84 60       	ori	r24, 0x04	; 4
     998:	84 b9       	out	0x04, r24	; 4
	BIT_CLEAR(PORT_LED_BLINK_GPS, PIN_LED_BLINK_GPS);
     99a:	85 b1       	in	r24, 0x05	; 5
     99c:	8b 7f       	andi	r24, 0xFB	; 251
     99e:	85 b9       	out	0x05, r24	; 5
	BIT_SET(DDR_LED_BLINK_SYSTEM_STATUS, PIN_LED_SYSTEM_STATUS);
     9a0:	84 b1       	in	r24, 0x04	; 4
     9a2:	80 61       	ori	r24, 0x10	; 16
     9a4:	84 b9       	out	0x04, r24	; 4
	BIT_CLEAR(PORT_LED_SYSTEM_STATUS, PIN_LED_SYSTEM_STATUS);
     9a6:	85 b1       	in	r24, 0x05	; 5
     9a8:	8f 7e       	andi	r24, 0xEF	; 239
     9aa:	85 b9       	out	0x05, r24	; 5
	
	lcd_init();
     9ac:	0e 94 e6 03 	call	0x7cc	; 0x7cc <lcd_init>
	lcd_set_cursor(1,1);
     9b0:	61 e0       	ldi	r22, 0x01	; 1
     9b2:	81 e0       	ldi	r24, 0x01	; 1
     9b4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <lcd_set_cursor>
	lcd_write_string("Iniciando...");
     9b8:	81 e1       	ldi	r24, 0x11	; 17
     9ba:	91 e0       	ldi	r25, 0x01	; 1
     9bc:	0e 94 46 04 	call	0x88c	; 0x88c <lcd_write_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9c0:	bf ef       	ldi	r27, 0xFF	; 255
     9c2:	2b e7       	ldi	r18, 0x7B	; 123
     9c4:	32 e9       	ldi	r19, 0x92	; 146
     9c6:	b1 50       	subi	r27, 0x01	; 1
     9c8:	20 40       	sbci	r18, 0x00	; 0
     9ca:	30 40       	sbci	r19, 0x00	; 0
     9cc:	e1 f7       	brne	.-8      	; 0x9c6 <__stack+0xc7>
     9ce:	00 c0       	rjmp	.+0      	; 0x9d0 <__stack+0xd1>
     9d0:	00 00       	nop
	_delay_ms(3000);
	lcd_clear();
     9d2:	0e 94 76 04 	call	0x8ec	; 0x8ec <lcd_clear>
	
	init_systick();                       // se inicia el contador general del sistema
     9d6:	0e 94 f3 06 	call	0xde6	; 0xde6 <init_systick>
	uart_init();
     9da:	0e 94 13 07 	call	0xe26	; 0xe26 <uart_init>
	enable_int_uart();
     9de:	0e 94 2e 07 	call	0xe5c	; 0xe5c <enable_int_uart>
	sei();
     9e2:	78 94       	sei
	const unsigned int periodo_exec_lora = 2000;       // para 1000ms
	unsigned long current_count_lora_exec = 0;
	
	// variables para el task led blink 250ms
	const unsigned int periodo_exec_ledblink = 250;       // para 250ms
	unsigned long current_count_ledblink_exec = 0;
     9e4:	c1 2c       	mov	r12, r1
     9e6:	d1 2c       	mov	r13, r1
     9e8:	76 01       	movw	r14, r12
	unsigned long current_count_dht11 = 0;
	unsigned char flag_readinprogress_dht11 = 0;
	
	// variables para el task de envio a modulo lora
	const unsigned int periodo_exec_lora = 2000;       // para 1000ms
	unsigned long current_count_lora_exec = 0;
     9ea:	81 2c       	mov	r8, r1
     9ec:	91 2c       	mov	r9, r1
     9ee:	54 01       	movw	r10, r8
	// variables para el task de lectura del dht11
	const unsigned char periodo_dht11 = 18;                  // para 18ms
	const unsigned int periodo_exec_read_dht11 = 1000;       // para 500ms
	unsigned long current_count_dht11_exec = 0;              // contador para ejecucion de lectura de dht11
	unsigned long current_count_dht11 = 0;
	unsigned char flag_readinprogress_dht11 = 0;
     9f0:	31 2c       	mov	r3, r1
{    
	// variables para el task de lectura del dht11
	const unsigned char periodo_dht11 = 18;                  // para 18ms
	const unsigned int periodo_exec_read_dht11 = 1000;       // para 500ms
	unsigned long current_count_dht11_exec = 0;              // contador para ejecucion de lectura de dht11
	unsigned long current_count_dht11 = 0;
     9f2:	c6 5c       	subi	r28, 0xC6	; 198
     9f4:	de 4f       	sbci	r29, 0xFE	; 254
     9f6:	18 82       	st	Y, r1
     9f8:	19 82       	std	Y+1, r1	; 0x01
     9fa:	1a 82       	std	Y+2, r1	; 0x02
     9fc:	1b 82       	std	Y+3, r1	; 0x03
     9fe:	ca 53       	subi	r28, 0x3A	; 58
     a00:	d1 40       	sbci	r29, 0x01	; 1
int main(void)
{    
	// variables para el task de lectura del dht11
	const unsigned char periodo_dht11 = 18;                  // para 18ms
	const unsigned int periodo_exec_read_dht11 = 1000;       // para 500ms
	unsigned long current_count_dht11_exec = 0;              // contador para ejecucion de lectura de dht11
     a02:	41 2c       	mov	r4, r1
     a04:	51 2c       	mov	r5, r1
     a06:	32 01       	movw	r6, r4
	sei();
	
    while (1) 
    {
		// task lectura de uart respuesta modulo gps
		if (uartmsg == 1)
     a08:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <uartmsg>
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	09 f0       	breq	.+2      	; 0xa12 <__stack+0x113>
     a10:	4b c0       	rjmp	.+150    	; 0xaa8 <__stack+0x1a9>
		{					
			// send_serial_write(&DDRB, &PORTB, PIN_TX_LORA_SERIAL, rx_buffer);
			// send_serial_write(&DDRB, &PORTB, PIN_TX_LORA_SERIAL, "\r\n");				
			if (getCoordenadasGPS(rx_buffer, &dataGPSread) != -1)       // si se realizo una lectura de un formato NMAE GPRMC
     a12:	be 01       	movw	r22, r28
     a14:	67 5f       	subi	r22, 0xF7	; 247
     a16:	7f 4f       	sbci	r23, 0xFF	; 255
     a18:	8b e3       	ldi	r24, 0x3B	; 59
     a1a:	91 e0       	ldi	r25, 0x01	; 1
     a1c:	0e 94 bc 02 	call	0x578	; 0x578 <getCoordenadasGPS>
			{
				// se valida si hay datos
				if (dataGPSread.horaact[0] != '\0' && dataGPSread.latitud[0] != '\0' && dataGPSread.longitud[0] != '\0' && dataGPSread.speed[0] != '\0')
     a20:	89 85       	ldd	r24, Y+9	; 0x09
     a22:	88 23       	and	r24, r24
     a24:	d9 f1       	breq	.+118    	; 0xa9c <__stack+0x19d>
     a26:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a28:	88 23       	and	r24, r24
     a2a:	c1 f1       	breq	.+112    	; 0xa9c <__stack+0x19d>
     a2c:	89 a9       	ldd	r24, Y+49	; 0x31
     a2e:	88 23       	and	r24, r24
     a30:	a9 f1       	breq	.+106    	; 0xa9c <__stack+0x19d>
     a32:	29 96       	adiw	r28, 0x09	; 9
     a34:	8f ad       	ldd	r24, Y+63	; 0x3f
     a36:	29 97       	sbiw	r28, 0x09	; 9
     a38:	88 23       	and	r24, r24
     a3a:	81 f1       	breq	.+96     	; 0xa9c <__stack+0x19d>
				{
					sprintf(arrayLcdHora, dataGPSread.horaact);
     a3c:	8e 01       	movw	r16, r28
     a3e:	07 5f       	subi	r16, 0xF7	; 247
     a40:	1f 4f       	sbci	r17, 0xFF	; 255
     a42:	1f 93       	push	r17
     a44:	0f 93       	push	r16
     a46:	ce 01       	movw	r24, r28
     a48:	88 59       	subi	r24, 0x98	; 152
     a4a:	9f 4f       	sbci	r25, 0xFF	; 255
     a4c:	9f 93       	push	r25
     a4e:	8f 93       	push	r24
     a50:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sprintf>
					sprintf(arrayLatitud, dataGPSread.latitud);
     a54:	ce 01       	movw	r24, r28
     a56:	4d 96       	adiw	r24, 0x1d	; 29
     a58:	9f 93       	push	r25
     a5a:	8f 93       	push	r24
     a5c:	85 52       	subi	r24, 0x25	; 37
     a5e:	9f 4f       	sbci	r25, 0xFF	; 255
     a60:	9f 93       	push	r25
     a62:	8f 93       	push	r24
     a64:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sprintf>
					sprintf(arrayLongitud, dataGPSread.longitud);
     a68:	ce 01       	movw	r24, r28
     a6a:	c1 96       	adiw	r24, 0x31	; 49
     a6c:	9f 93       	push	r25
     a6e:	8f 93       	push	r24
     a70:	83 52       	subi	r24, 0x23	; 35
     a72:	9f 4f       	sbci	r25, 0xFF	; 255
     a74:	9f 93       	push	r25
     a76:	8f 93       	push	r24
     a78:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sprintf>
					sprintf(arrayVelocidad, dataGPSread.speed);
     a7c:	01 5c       	subi	r16, 0xC1	; 193
     a7e:	1f 4f       	sbci	r17, 0xFF	; 255
     a80:	1f 93       	push	r17
     a82:	0f 93       	push	r16
     a84:	ce 01       	movw	r24, r28
     a86:	8c 5d       	subi	r24, 0xDC	; 220
     a88:	9e 4f       	sbci	r25, 0xFE	; 254
     a8a:	9f 93       	push	r25
     a8c:	8f 93       	push	r24
     a8e:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sprintf>
     a92:	0f b6       	in	r0, 0x3f	; 63
     a94:	f8 94       	cli
     a96:	de bf       	out	0x3e, r29	; 62
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	cd bf       	out	0x3d, r28	; 61
				}
				TOGGLE_BIT(PORT_LED_BLINK_GPS, PIN_LED_BLINK_GPS);										
     a9c:	95 b1       	in	r25, 0x05	; 5
     a9e:	84 e0       	ldi	r24, 0x04	; 4
     aa0:	89 27       	eor	r24, r25
     aa2:	85 b9       	out	0x05, r24	; 5
				sprintf(arrayLatitud, "nodata");
				sprintf(arrayLongitud, "nodata");
				sprintf(arrayVelocidad, "nodata");				
			}
										
			uartmsg = 0;
     aa4:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <uartmsg>
			// memset(arrayHumedad, 0, 6);
			// memset(arrayLoraMsj, 0, 120);							
		}
		
		// task de lectura del dhtll
		if ((systick_count - current_count_dht11_exec >= periodo_exec_read_dht11) || (flag_readinprogress_dht11 == 1))      // si ya pasaron 500ms se realiza la lectura del dht11 o si hay una lectura de dht11 en progreso
     aa8:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <systick_count>
     aac:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <systick_count+0x1>
     ab0:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <systick_count+0x2>
     ab4:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <systick_count+0x3>
     ab8:	84 19       	sub	r24, r4
     aba:	95 09       	sbc	r25, r5
     abc:	a6 09       	sbc	r26, r6
     abe:	b7 09       	sbc	r27, r7
     ac0:	88 3e       	cpi	r24, 0xE8	; 232
     ac2:	93 40       	sbci	r25, 0x03	; 3
     ac4:	a1 05       	cpc	r26, r1
     ac6:	b1 05       	cpc	r27, r1
     ac8:	18 f4       	brcc	.+6      	; 0xad0 <__stack+0x1d1>
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	38 12       	cpse	r3, r24
     ace:	40 c0       	rjmp	.+128    	; 0xb50 <__stack+0x251>
		{
			// se realiza el task de lectura de dht11
			if (flag_readinprogress_dht11 == 0)
     ad0:	31 10       	cpse	r3, r1
     ad2:	14 c0       	rjmp	.+40     	; 0xafc <__stack+0x1fd>
			{
				startpulse_dht11();                    // envia el pulso de inicio al dht11
     ad4:	0e 94 94 01 	call	0x328	; 0x328 <startpulse_dht11>
				current_count_dht11 = systick_count;   // se inicia el conteo de 20ms
     ad8:	20 91 37 01 	lds	r18, 0x0137	; 0x800137 <systick_count>
     adc:	30 91 38 01 	lds	r19, 0x0138	; 0x800138 <systick_count+0x1>
     ae0:	40 91 39 01 	lds	r20, 0x0139	; 0x800139 <systick_count+0x2>
     ae4:	50 91 3a 01 	lds	r21, 0x013A	; 0x80013a <systick_count+0x3>
     ae8:	c6 5c       	subi	r28, 0xC6	; 198
     aea:	de 4f       	sbci	r29, 0xFE	; 254
     aec:	28 83       	st	Y, r18
     aee:	39 83       	std	Y+1, r19	; 0x01
     af0:	4a 83       	std	Y+2, r20	; 0x02
     af2:	5b 83       	std	Y+3, r21	; 0x03
     af4:	ca 53       	subi	r28, 0x3A	; 58
     af6:	d1 40       	sbci	r29, 0x01	; 1
				flag_readinprogress_dht11 = 1;         // flag de lectura de dht11 en progreso en 1
     af8:	33 24       	eor	r3, r3
     afa:	33 94       	inc	r3
			}
			
			if (systick_count - current_count_dht11 >= periodo_dht11)    // si ya pasaron 18ms, se continua con la lectura del dht11
     afc:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <systick_count>
     b00:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <systick_count+0x1>
     b04:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <systick_count+0x2>
     b08:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <systick_count+0x3>
     b0c:	c6 5c       	subi	r28, 0xC6	; 198
     b0e:	de 4f       	sbci	r29, 0xFE	; 254
     b10:	28 81       	ld	r18, Y
     b12:	39 81       	ldd	r19, Y+1	; 0x01
     b14:	4a 81       	ldd	r20, Y+2	; 0x02
     b16:	5b 81       	ldd	r21, Y+3	; 0x03
     b18:	ca 53       	subi	r28, 0x3A	; 58
     b1a:	d1 40       	sbci	r29, 0x01	; 1
     b1c:	82 1b       	sub	r24, r18
     b1e:	93 0b       	sbc	r25, r19
     b20:	a4 0b       	sbc	r26, r20
     b22:	b5 0b       	sbc	r27, r21
     b24:	42 97       	sbiw	r24, 0x12	; 18
     b26:	a1 05       	cpc	r26, r1
     b28:	b1 05       	cpc	r27, r1
     b2a:	40 f0       	brcs	.+16     	; 0xb3c <__stack+0x23d>
			{
				// leemos el sensor dht11
				read_dht11(&temperatureDht, &humedadDht);
     b2c:	be 01       	movw	r22, r28
     b2e:	6b 5f       	subi	r22, 0xFB	; 251
     b30:	7f 4f       	sbci	r23, 0xFF	; 255
     b32:	ce 01       	movw	r24, r28
     b34:	01 96       	adiw	r24, 0x01	; 1
     b36:	0e 94 9d 01 	call	0x33a	; 0x33a <read_dht11>
				// print_lcd_dht11(temperatureDht, humidyty);
				
				flag_readinprogress_dht11 = 0;         // flag de lectura de dht11 en progreso en 0
     b3a:	31 2c       	mov	r3, r1
			}
			
			if (flag_readinprogress_dht11 == 0)         // si ya termino la lectura, guardamos el systick
     b3c:	31 10       	cpse	r3, r1
     b3e:	08 c0       	rjmp	.+16     	; 0xb50 <__stack+0x251>
			{
				current_count_dht11_exec = systick_count;
     b40:	40 90 37 01 	lds	r4, 0x0137	; 0x800137 <systick_count>
     b44:	50 90 38 01 	lds	r5, 0x0138	; 0x800138 <systick_count+0x1>
     b48:	60 90 39 01 	lds	r6, 0x0139	; 0x800139 <systick_count+0x2>
     b4c:	70 90 3a 01 	lds	r7, 0x013A	; 0x80013a <systick_count+0x3>
			}
		}
		
		// task de envio de mensaje a LORA cada 1s
		if (systick_count - current_count_lora_exec >= periodo_exec_lora)		
     b50:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <systick_count>
     b54:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <systick_count+0x1>
     b58:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <systick_count+0x2>
     b5c:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <systick_count+0x3>
     b60:	88 19       	sub	r24, r8
     b62:	99 09       	sbc	r25, r9
     b64:	aa 09       	sbc	r26, r10
     b66:	bb 09       	sbc	r27, r11
     b68:	80 3d       	cpi	r24, 0xD0	; 208
     b6a:	97 40       	sbci	r25, 0x07	; 7
     b6c:	a1 05       	cpc	r26, r1
     b6e:	b1 05       	cpc	r27, r1
     b70:	08 f4       	brcc	.+2      	; 0xb74 <__stack+0x275>
     b72:	5a c0       	rjmp	.+180    	; 0xc28 <__stack+0x329>
		{
			dtostrf(temperatureDht, 2, 2, arrayTemp);
     b74:	4e 01       	movw	r8, r28
     b76:	4c e5       	ldi	r20, 0x5C	; 92
     b78:	84 0e       	add	r8, r20
     b7a:	91 1c       	adc	r9, r1
     b7c:	69 81       	ldd	r22, Y+1	; 0x01
     b7e:	7a 81       	ldd	r23, Y+2	; 0x02
     b80:	8b 81       	ldd	r24, Y+3	; 0x03
     b82:	9c 81       	ldd	r25, Y+4	; 0x04
     b84:	84 01       	movw	r16, r8
     b86:	22 e0       	ldi	r18, 0x02	; 2
     b88:	42 e0       	ldi	r20, 0x02	; 2
     b8a:	0e 94 e7 08 	call	0x11ce	; 0x11ce <dtostrf>
			dtostrf(humedadDht, 2, 2, arrayHumedad);
     b8e:	5e 01       	movw	r10, r28
     b90:	52 e6       	ldi	r21, 0x62	; 98
     b92:	a5 0e       	add	r10, r21
     b94:	b1 1c       	adc	r11, r1
     b96:	6d 81       	ldd	r22, Y+5	; 0x05
     b98:	7e 81       	ldd	r23, Y+6	; 0x06
     b9a:	8f 81       	ldd	r24, Y+7	; 0x07
     b9c:	98 85       	ldd	r25, Y+8	; 0x08
     b9e:	85 01       	movw	r16, r10
     ba0:	22 e0       	ldi	r18, 0x02	; 2
     ba2:	42 e0       	ldi	r20, 0x02	; 2
     ba4:	0e 94 e7 08 	call	0x11ce	; 0x11ce <dtostrf>
			// se envia el mensaje a traves del modulo LORA
			sprintf(arrayLoraMsj, "{%s:%s:%s:%s:%s}", arrayLatitud, arrayLongitud, arrayVelocidad, arrayTemp, arrayHumedad);
     ba8:	bf 92       	push	r11
     baa:	af 92       	push	r10
     bac:	9f 92       	push	r9
     bae:	8f 92       	push	r8
     bb0:	ce 01       	movw	r24, r28
     bb2:	8c 5d       	subi	r24, 0xDC	; 220
     bb4:	9e 4f       	sbci	r25, 0xFE	; 254
     bb6:	9f 93       	push	r25
     bb8:	8f 93       	push	r24
     bba:	46 97       	sbiw	r24, 0x16	; 22
     bbc:	9f 93       	push	r25
     bbe:	8f 93       	push	r24
     bc0:	46 97       	sbiw	r24, 0x16	; 22
     bc2:	9f 93       	push	r25
     bc4:	8f 93       	push	r24
     bc6:	8e e1       	ldi	r24, 0x1E	; 30
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	9f 93       	push	r25
     bcc:	8f 93       	push	r24
     bce:	02 5e       	subi	r16, 0xE2	; 226
     bd0:	1f 4f       	sbci	r17, 0xFF	; 255
     bd2:	1f 93       	push	r17
     bd4:	0f 93       	push	r16
     bd6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <sprintf>
			send_serial_write(&DDRB, &PORTB, PIN_TX_LORA_SERIAL, arrayLoraMsj);       // *(uint8_t*)
     bda:	98 01       	movw	r18, r16
     bdc:	43 e0       	ldi	r20, 0x03	; 3
     bde:	65 e2       	ldi	r22, 0x25	; 37
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	84 e2       	ldi	r24, 0x24	; 36
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 33 06 	call	0xc66	; 0xc66 <send_serial_write>
			send_serial_write(&DDRB, &PORTB, PIN_TX_LORA_SERIAL, "\r\n");						
     bea:	2f e2       	ldi	r18, 0x2F	; 47
     bec:	31 e0       	ldi	r19, 0x01	; 1
     bee:	43 e0       	ldi	r20, 0x03	; 3
     bf0:	65 e2       	ldi	r22, 0x25	; 37
     bf2:	70 e0       	ldi	r23, 0x00	; 0
     bf4:	84 e2       	ldi	r24, 0x24	; 36
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	0e 94 33 06 	call	0xc66	; 0xc66 <send_serial_write>
			
			// led blink led envio msg lora
			TOGGLE_BIT(PORT_LED_BLINK_LORA, PIN_LED_BLINK_LORA);
     bfc:	95 b1       	in	r25, 0x05	; 5
     bfe:	82 e0       	ldi	r24, 0x02	; 2
     c00:	89 27       	eor	r24, r25
     c02:	85 b9       	out	0x05, r24	; 5
			lcd_write_string(arrayLcdHora);
     c04:	ce 01       	movw	r24, r28
     c06:	88 59       	subi	r24, 0x98	; 152
     c08:	9f 4f       	sbci	r25, 0xFF	; 255
     c0a:	0e 94 46 04 	call	0x88c	; 0x88c <lcd_write_string>
			current_count_lora_exec = systick_count;
     c0e:	80 90 37 01 	lds	r8, 0x0137	; 0x800137 <systick_count>
     c12:	90 90 38 01 	lds	r9, 0x0138	; 0x800138 <systick_count+0x1>
     c16:	a0 90 39 01 	lds	r10, 0x0139	; 0x800139 <systick_count+0x2>
     c1a:	b0 90 3a 01 	lds	r11, 0x013A	; 0x80013a <systick_count+0x3>
     c1e:	0f b6       	in	r0, 0x3f	; 63
     c20:	f8 94       	cli
     c22:	de bf       	out	0x3e, r29	; 62
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	cd bf       	out	0x3d, r28	; 61
		}
		
		// task de led blink status
		if (systick_count - current_count_ledblink_exec >= periodo_exec_ledblink)
     c28:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <systick_count>
     c2c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <systick_count+0x1>
     c30:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <systick_count+0x2>
     c34:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <systick_count+0x3>
     c38:	8c 19       	sub	r24, r12
     c3a:	9d 09       	sbc	r25, r13
     c3c:	ae 09       	sbc	r26, r14
     c3e:	bf 09       	sbc	r27, r15
     c40:	8a 3f       	cpi	r24, 0xFA	; 250
     c42:	91 05       	cpc	r25, r1
     c44:	a1 05       	cpc	r26, r1
     c46:	b1 05       	cpc	r27, r1
     c48:	08 f4       	brcc	.+2      	; 0xc4c <__stack+0x34d>
     c4a:	de ce       	rjmp	.-580    	; 0xa08 <__stack+0x109>
		{
			TOGGLE_BIT(PORT_LED_SYSTEM_STATUS, PIN_LED_SYSTEM_STATUS);
     c4c:	95 b1       	in	r25, 0x05	; 5
     c4e:	80 e1       	ldi	r24, 0x10	; 16
     c50:	89 27       	eor	r24, r25
     c52:	85 b9       	out	0x05, r24	; 5
			current_count_ledblink_exec = systick_count;
     c54:	c0 90 37 01 	lds	r12, 0x0137	; 0x800137 <systick_count>
     c58:	d0 90 38 01 	lds	r13, 0x0138	; 0x800138 <systick_count+0x1>
     c5c:	e0 90 39 01 	lds	r14, 0x0139	; 0x800139 <systick_count+0x2>
     c60:	f0 90 3a 01 	lds	r15, 0x013A	; 0x80013a <systick_count+0x3>
     c64:	d1 ce       	rjmp	.-606    	; 0xa08 <__stack+0x109>

00000c66 <send_serial_write>:
Envia un mensaje serial a traves del pin seleccionado
param char* str : mensaje a enviar
return void
*************************************************************************/
void send_serial_write(uint8_t* DDR_SERIAL, uint8_t* PORT_SERIAL, uint8_t PIN_SERIAL, const char* str)
{			
     c66:	cf 93       	push	r28
     c68:	df 93       	push	r29
     c6a:	ec 01       	movw	r28, r24
     c6c:	fb 01       	movw	r30, r22
     c6e:	d9 01       	movw	r26, r18
	*DDR_SERIAL |= (1<<PIN_SERIAL);
     c70:	21 e0       	ldi	r18, 0x01	; 1
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	c9 01       	movw	r24, r18
     c76:	02 c0       	rjmp	.+4      	; 0xc7c <send_serial_write+0x16>
     c78:	88 0f       	add	r24, r24
     c7a:	99 1f       	adc	r25, r25
     c7c:	4a 95       	dec	r20
     c7e:	e2 f7       	brpl	.-8      	; 0xc78 <send_serial_write+0x12>
     c80:	ac 01       	movw	r20, r24
     c82:	28 2f       	mov	r18, r24
     c84:	98 81       	ld	r25, Y
     c86:	94 2b       	or	r25, r20
     c88:	98 83       	st	Y, r25
	*PORT_SERIAL |= (1<<PIN_SERIAL);
     c8a:	80 81       	ld	r24, Z
     c8c:	48 2b       	or	r20, r24
     c8e:	40 83       	st	Z, r20
	
	while(*str != '\0')                  // recorremos los caracteres
     c90:	31 c0       	rjmp	.+98     	; 0xcf4 <send_serial_write+0x8e>
	{
		// iniciamos la transmision
		*PORT_SERIAL &= ~(1<<PIN_SERIAL);
     c92:	42 2f       	mov	r20, r18
     c94:	40 95       	com	r20
     c96:	80 81       	ld	r24, Z
     c98:	84 23       	and	r24, r20
     c9a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     c9c:	8f e9       	ldi	r24, 0x9F	; 159
     c9e:	91 e0       	ldi	r25, 0x01	; 1
     ca0:	01 97       	sbiw	r24, 0x01	; 1
     ca2:	f1 f7       	brne	.-4      	; 0xca0 <send_serial_write+0x3a>
     ca4:	00 c0       	rjmp	.+0      	; 0xca6 <send_serial_write+0x40>
     ca6:	00 00       	nop
		#elif SERIAL_RATE_115200 == 1		
			_delay_us(CALC_UBRR_8(SERIAL_BAUD_RATE_115200_BPS));		
		#endif
		
		// _delay_us(104);			
		for (uint8_t i = 0; i < 8; i++)           //iniciamos por el bit menos significativo
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	18 c0       	rjmp	.+48     	; 0xcdc <send_serial_write+0x76>
		{			
			if (*str & (1<<i))
     cac:	8c 91       	ld	r24, X
     cae:	90 e0       	ldi	r25, 0x00	; 0
     cb0:	03 2e       	mov	r0, r19
     cb2:	02 c0       	rjmp	.+4      	; 0xcb8 <send_serial_write+0x52>
     cb4:	95 95       	asr	r25
     cb6:	87 95       	ror	r24
     cb8:	0a 94       	dec	r0
     cba:	e2 f7       	brpl	.-8      	; 0xcb4 <send_serial_write+0x4e>
     cbc:	80 ff       	sbrs	r24, 0
     cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <send_serial_write+0x62>
			{
				*PORT_SERIAL |= (1<<PIN_SERIAL);
     cc0:	80 81       	ld	r24, Z
     cc2:	82 2b       	or	r24, r18
     cc4:	80 83       	st	Z, r24
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <send_serial_write+0x68>
			}
			else
			{
				*PORT_SERIAL &= ~(1<<PIN_SERIAL);
     cc8:	80 81       	ld	r24, Z
     cca:	84 23       	and	r24, r20
     ccc:	80 83       	st	Z, r24
     cce:	8f e9       	ldi	r24, 0x9F	; 159
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	01 97       	sbiw	r24, 0x01	; 1
     cd4:	f1 f7       	brne	.-4      	; 0xcd2 <send_serial_write+0x6c>
     cd6:	00 c0       	rjmp	.+0      	; 0xcd8 <send_serial_write+0x72>
     cd8:	00 00       	nop
		#elif SERIAL_RATE_115200 == 1		
			_delay_us(CALC_UBRR_8(SERIAL_BAUD_RATE_115200_BPS));		
		#endif
		
		// _delay_us(104);			
		for (uint8_t i = 0; i < 8; i++)           //iniciamos por el bit menos significativo
     cda:	3f 5f       	subi	r19, 0xFF	; 255
     cdc:	38 30       	cpi	r19, 0x08	; 8
     cde:	30 f3       	brcs	.-52     	; 0xcac <send_serial_write+0x46>
				_delay_us(CALC_UBRR_8(SERIAL_BAUD_RATE_115200_BPS));
			#endif
		}
					
		// stop bit
		*PORT_SERIAL |= (1<<PIN_SERIAL);
     ce0:	80 81       	ld	r24, Z
     ce2:	82 2b       	or	r24, r18
     ce4:	80 83       	st	Z, r24
     ce6:	8f e9       	ldi	r24, 0x9F	; 159
     ce8:	91 e0       	ldi	r25, 0x01	; 1
     cea:	01 97       	sbiw	r24, 0x01	; 1
     cec:	f1 f7       	brne	.-4      	; 0xcea <send_serial_write+0x84>
     cee:	00 c0       	rjmp	.+0      	; 0xcf0 <send_serial_write+0x8a>
     cf0:	00 00       	nop
		#elif SERIAL_RATE_76800 == 1
			_delay_us(SERIAL_CALC_UBRR_8(SERIAL_BAUD_RATE_76800_BPS));
		#elif SERIAL_RATE_115200 == 1
			_delay_us(CALC_UBRR_8(SERIAL_BAUD_RATE_115200_BPS));
		#endif
		str++;
     cf2:	11 96       	adiw	r26, 0x01	; 1
void send_serial_write(uint8_t* DDR_SERIAL, uint8_t* PORT_SERIAL, uint8_t PIN_SERIAL, const char* str)
{			
	*DDR_SERIAL |= (1<<PIN_SERIAL);
	*PORT_SERIAL |= (1<<PIN_SERIAL);
	
	while(*str != '\0')                  // recorremos los caracteres
     cf4:	8c 91       	ld	r24, X
     cf6:	81 11       	cpse	r24, r1
     cf8:	cc cf       	rjmp	.-104    	; 0xc92 <send_serial_write+0x2c>
		#elif SERIAL_RATE_115200 == 1
			_delay_us(CALC_UBRR_8(SERIAL_BAUD_RATE_115200_BPS));
		#endif
		str++;
	}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <set_preescaler>:
/*************************************************************************
Funcion set_preescaler, configura el preescaler para el timer0
*************************************************************************/
static void set_preescaler(unsigned int preescaler)
{
	switch (preescaler)
     d00:	80 34       	cpi	r24, 0x40	; 64
     d02:	91 05       	cpc	r25, r1
     d04:	39 f1       	breq	.+78     	; 0xd54 <set_preescaler+0x54>
     d06:	30 f4       	brcc	.+12     	; 0xd14 <set_preescaler+0x14>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	91 05       	cpc	r25, r1
     d0c:	59 f0       	breq	.+22     	; 0xd24 <set_preescaler+0x24>
     d0e:	08 97       	sbiw	r24, 0x08	; 8
     d10:	a9 f0       	breq	.+42     	; 0xd3c <set_preescaler+0x3c>
     d12:	08 95       	ret
     d14:	81 15       	cp	r24, r1
     d16:	21 e0       	ldi	r18, 0x01	; 1
     d18:	92 07       	cpc	r25, r18
     d1a:	41 f1       	breq	.+80     	; 0xd6c <set_preescaler+0x6c>
     d1c:	81 15       	cp	r24, r1
     d1e:	94 40       	sbci	r25, 0x04	; 4
     d20:	89 f1       	breq	.+98     	; 0xd84 <set_preescaler+0x84>
     d22:	08 95       	ret
	{
		case PREESCALER_1 :           //preescaler en 1
		{
			TCCR1B |=  (1<<CS10);
     d24:	e1 e8       	ldi	r30, 0x81	; 129
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	81 60       	ori	r24, 0x01	; 1
     d2c:	80 83       	st	Z, r24
	        TCCR1B &=~ (1<<CS11);
     d2e:	80 81       	ld	r24, Z
     d30:	8d 7f       	andi	r24, 0xFD	; 253
     d32:	80 83       	st	Z, r24
	        TCCR1B &=~ (1<<CS12);
     d34:	80 81       	ld	r24, Z
     d36:	8b 7f       	andi	r24, 0xFB	; 251
     d38:	80 83       	st	Z, r24
		}
		break;
     d3a:	08 95       	ret
		case PREESCALER_8 :           //preescaler en 8
		{
			TCCR1B &=~ (1<<CS10);
     d3c:	e1 e8       	ldi	r30, 0x81	; 129
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	8e 7f       	andi	r24, 0xFE	; 254
     d44:	80 83       	st	Z, r24
	        TCCR1B |=  (1<<CS11);
     d46:	80 81       	ld	r24, Z
     d48:	82 60       	ori	r24, 0x02	; 2
     d4a:	80 83       	st	Z, r24
	        TCCR1B &=~ (1<<CS12);
     d4c:	80 81       	ld	r24, Z
     d4e:	8b 7f       	andi	r24, 0xFB	; 251
     d50:	80 83       	st	Z, r24
		}
		break;
     d52:	08 95       	ret
		case PREESCALER_64 :          //preescaler en 64
		{
			TCCR1B |=  (1<<CS10);
     d54:	e1 e8       	ldi	r30, 0x81	; 129
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	81 60       	ori	r24, 0x01	; 1
     d5c:	80 83       	st	Z, r24
	        TCCR1B |=  (1<<CS11);
     d5e:	80 81       	ld	r24, Z
     d60:	82 60       	ori	r24, 0x02	; 2
     d62:	80 83       	st	Z, r24
	        TCCR1B &=~ (1<<CS12);
     d64:	80 81       	ld	r24, Z
     d66:	8b 7f       	andi	r24, 0xFB	; 251
     d68:	80 83       	st	Z, r24
		}
		break;
     d6a:	08 95       	ret
		case PREESCALER_256 :         //preescaler en 256
		{
			TCCR1B &=~ (1<<CS10);
     d6c:	e1 e8       	ldi	r30, 0x81	; 129
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	80 81       	ld	r24, Z
     d72:	8e 7f       	andi	r24, 0xFE	; 254
     d74:	80 83       	st	Z, r24
	        TCCR1B &=~ (1<<CS11);
     d76:	80 81       	ld	r24, Z
     d78:	8d 7f       	andi	r24, 0xFD	; 253
     d7a:	80 83       	st	Z, r24
	        TCCR1B |=  (1<<CS12);
     d7c:	80 81       	ld	r24, Z
     d7e:	84 60       	ori	r24, 0x04	; 4
     d80:	80 83       	st	Z, r24
		}
		break;
     d82:	08 95       	ret
		case PREESCALER_1024 :       //preescaler en 1024
		{
			TCCR1B |=  (1<<CS10);
     d84:	e1 e8       	ldi	r30, 0x81	; 129
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	80 81       	ld	r24, Z
     d8a:	81 60       	ori	r24, 0x01	; 1
     d8c:	80 83       	st	Z, r24
	        TCCR1B &=~ (1<<CS11);
     d8e:	80 81       	ld	r24, Z
     d90:	8d 7f       	andi	r24, 0xFD	; 253
     d92:	80 83       	st	Z, r24
	        TCCR1B |=  (1<<CS12);
     d94:	80 81       	ld	r24, Z
     d96:	84 60       	ori	r24, 0x04	; 4
     d98:	80 83       	st	Z, r24
     d9a:	08 95       	ret

00000d9c <__vector_11>:

#include "systick.h"

// Handler de interrupcion TIMER1_COMPA
ISR(TIMER1_COMPA_vect)
{
     d9c:	1f 92       	push	r1
     d9e:	0f 92       	push	r0
     da0:	0f b6       	in	r0, 0x3f	; 63
     da2:	0f 92       	push	r0
     da4:	11 24       	eor	r1, r1
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	af 93       	push	r26
     dac:	bf 93       	push	r27
	systick_count++;
     dae:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <systick_count>
     db2:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <systick_count+0x1>
     db6:	a0 91 39 01 	lds	r26, 0x0139	; 0x800139 <systick_count+0x2>
     dba:	b0 91 3a 01 	lds	r27, 0x013A	; 0x80013a <systick_count+0x3>
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	a1 1d       	adc	r26, r1
     dc2:	b1 1d       	adc	r27, r1
     dc4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <systick_count>
     dc8:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <systick_count+0x1>
     dcc:	a0 93 39 01 	sts	0x0139, r26	; 0x800139 <systick_count+0x2>
     dd0:	b0 93 3a 01 	sts	0x013A, r27	; 0x80013a <systick_count+0x3>
}
     dd4:	bf 91       	pop	r27
     dd6:	af 91       	pop	r26
     dd8:	9f 91       	pop	r25
     dda:	8f 91       	pop	r24
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <init_systick>:
Funcion init_systick, inicia el systick
*************************************************************************/
void init_systick()
{
	// Operation mode CTC mode 4
    TCCR1A &=~ (1<<WGM10);
     de6:	e0 e8       	ldi	r30, 0x80	; 128
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8e 7f       	andi	r24, 0xFE	; 254
     dee:	80 83       	st	Z, r24
	TCCR1A &=~ (1<<WGM11);
     df0:	80 81       	ld	r24, Z
     df2:	8d 7f       	andi	r24, 0xFD	; 253
     df4:	80 83       	st	Z, r24
	TCCR1B |=  (1<<WGM12);
     df6:	e1 e8       	ldi	r30, 0x81	; 129
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	88 60       	ori	r24, 0x08	; 8
     dfe:	80 83       	st	Z, r24
	TCCR1B &=~ (1<<WGM13);
     e00:	80 81       	ld	r24, Z
     e02:	8f 7e       	andi	r24, 0xEF	; 239
     e04:	80 83       	st	Z, r24
	
	OCR1A = CARGATIMER;              // se carga el timer para (2000) 1ms
     e06:	80 ed       	ldi	r24, 0xD0	; 208
     e08:	97 e0       	ldi	r25, 0x07	; 7
     e0a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
     e0e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	set_preescaler(PREESCALER_8);    // se configura el preescaler
     e12:	88 e0       	ldi	r24, 0x08	; 8
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	0e 94 80 06 	call	0xd00	; 0xd00 <set_preescaler>
	TIMSK1 |= (1<<OCIE1A);           // Se configura la interrupcion por output compare match A
     e1a:	ef e6       	ldi	r30, 0x6F	; 111
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	82 60       	ori	r24, 0x02	; 2
     e22:	80 83       	st	Z, r24
     e24:	08 95       	ret

00000e26 <uart_init>:
return void
*************************************************************************/
void disable_int_uart()
{
	//Deshabilitamos la interrupcion por RX
	UCSR0B &= ~(1<<RXCIE0);
     e26:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <rx_read_pos>
     e2a:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <uartmsg>
     e2e:	e2 ec       	ldi	r30, 0xC2	; 194
     e30:	f0 e0       	ldi	r31, 0x00	; 0
     e32:	80 81       	ld	r24, Z
     e34:	82 60       	ori	r24, 0x02	; 2
     e36:	80 83       	st	Z, r24
     e38:	80 81       	ld	r24, Z
     e3a:	84 60       	ori	r24, 0x04	; 4
     e3c:	80 83       	st	Z, r24
     e3e:	87 e6       	ldi	r24, 0x67	; 103
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     e46:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     e4a:	e1 ec       	ldi	r30, 0xC1	; 193
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	80 81       	ld	r24, Z
     e50:	88 60       	ori	r24, 0x08	; 8
     e52:	80 83       	st	Z, r24
     e54:	80 81       	ld	r24, Z
     e56:	80 61       	ori	r24, 0x10	; 16
     e58:	80 83       	st	Z, r24
     e5a:	08 95       	ret

00000e5c <enable_int_uart>:
     e5c:	e1 ec       	ldi	r30, 0xC1	; 193
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	80 68       	ori	r24, 0x80	; 128
     e64:	80 83       	st	Z, r24
     e66:	08 95       	ret

00000e68 <handler_rxinterrupt>:
param void
return void
*************************************************************************/
void handler_rxinterrupt()
{
	rx_buffer[rx_read_pos] = UDR0;
     e68:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <rx_read_pos>
     e6c:	f0 e0       	ldi	r31, 0x00	; 0
     e6e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     e72:	e5 5c       	subi	r30, 0xC5	; 197
     e74:	fe 4f       	sbci	r31, 0xFE	; 254
     e76:	80 83       	st	Z, r24
	
	if (rx_buffer[rx_read_pos] != '\r')                  //si no es el fin de la cadena
     e78:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <rx_read_pos>
     e7c:	f0 e0       	ldi	r31, 0x00	; 0
     e7e:	e5 5c       	subi	r30, 0xC5	; 197
     e80:	fe 4f       	sbci	r31, 0xFE	; 254
     e82:	80 81       	ld	r24, Z
     e84:	8d 30       	cpi	r24, 0x0D	; 13
     e86:	31 f0       	breq	.+12     	; 0xe94 <handler_rxinterrupt+0x2c>
	{
		rx_read_pos++;
     e88:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <rx_read_pos>
     e8c:	8f 5f       	subi	r24, 0xFF	; 255
     e8e:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <rx_read_pos>
     e92:	08 95       	ret
	}
	else
	{
		rx_buffer[rx_read_pos] = 0;                     // Nos aseguramos que el buffer termina en cero
     e94:	e0 91 34 01 	lds	r30, 0x0134	; 0x800134 <rx_read_pos>
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	e5 5c       	subi	r30, 0xC5	; 197
     e9c:	fe 4f       	sbci	r31, 0xFE	; 254
     e9e:	10 82       	st	Z, r1
		uartmsg = 1;		
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <uartmsg>
		rx_read_pos = 0;
     ea6:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <rx_read_pos>
     eaa:	08 95       	ret

00000eac <__vector_18>:
// funciones estaticas
static void UART_putc(unsigned char data);
static volatile unsigned char rx_read_pos;

ISR(USART_RX_vect)       //Interrupcion mensaje entrante en RX
{
     eac:	1f 92       	push	r1
     eae:	0f 92       	push	r0
     eb0:	0f b6       	in	r0, 0x3f	; 63
     eb2:	0f 92       	push	r0
     eb4:	11 24       	eor	r1, r1
     eb6:	2f 93       	push	r18
     eb8:	3f 93       	push	r19
     eba:	4f 93       	push	r20
     ebc:	5f 93       	push	r21
     ebe:	6f 93       	push	r22
     ec0:	7f 93       	push	r23
     ec2:	8f 93       	push	r24
     ec4:	9f 93       	push	r25
     ec6:	af 93       	push	r26
     ec8:	bf 93       	push	r27
     eca:	ef 93       	push	r30
     ecc:	ff 93       	push	r31
	handler_rxinterrupt();
     ece:	0e 94 34 07 	call	0xe68	; 0xe68 <handler_rxinterrupt>
}
     ed2:	ff 91       	pop	r31
     ed4:	ef 91       	pop	r30
     ed6:	bf 91       	pop	r27
     ed8:	af 91       	pop	r26
     eda:	9f 91       	pop	r25
     edc:	8f 91       	pop	r24
     ede:	7f 91       	pop	r23
     ee0:	6f 91       	pop	r22
     ee2:	5f 91       	pop	r21
     ee4:	4f 91       	pop	r20
     ee6:	3f 91       	pop	r19
     ee8:	2f 91       	pop	r18
     eea:	0f 90       	pop	r0
     eec:	0f be       	out	0x3f, r0	; 63
     eee:	0f 90       	pop	r0
     ef0:	1f 90       	pop	r1
     ef2:	18 95       	reti

00000ef4 <__subsf3>:
     ef4:	50 58       	subi	r21, 0x80	; 128

00000ef6 <__addsf3>:
     ef6:	bb 27       	eor	r27, r27
     ef8:	aa 27       	eor	r26, r26
     efa:	0e 94 92 07 	call	0xf24	; 0xf24 <__addsf3x>
     efe:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__fp_round>
     f02:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_pscA>
     f06:	38 f0       	brcs	.+14     	; 0xf16 <__addsf3+0x20>
     f08:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscB>
     f0c:	20 f0       	brcs	.+8      	; 0xf16 <__addsf3+0x20>
     f0e:	39 f4       	brne	.+14     	; 0xf1e <__addsf3+0x28>
     f10:	9f 3f       	cpi	r25, 0xFF	; 255
     f12:	19 f4       	brne	.+6      	; 0xf1a <__addsf3+0x24>
     f14:	26 f4       	brtc	.+8      	; 0xf1e <__addsf3+0x28>
     f16:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_nan>
     f1a:	0e f4       	brtc	.+2      	; 0xf1e <__addsf3+0x28>
     f1c:	e0 95       	com	r30
     f1e:	e7 fb       	bst	r30, 7
     f20:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_inf>

00000f24 <__addsf3x>:
     f24:	e9 2f       	mov	r30, r25
     f26:	0e 94 be 08 	call	0x117c	; 0x117c <__fp_split3>
     f2a:	58 f3       	brcs	.-42     	; 0xf02 <__addsf3+0xc>
     f2c:	ba 17       	cp	r27, r26
     f2e:	62 07       	cpc	r22, r18
     f30:	73 07       	cpc	r23, r19
     f32:	84 07       	cpc	r24, r20
     f34:	95 07       	cpc	r25, r21
     f36:	20 f0       	brcs	.+8      	; 0xf40 <__addsf3x+0x1c>
     f38:	79 f4       	brne	.+30     	; 0xf58 <__addsf3x+0x34>
     f3a:	a6 f5       	brtc	.+104    	; 0xfa4 <__addsf3x+0x80>
     f3c:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <__fp_zero>
     f40:	0e f4       	brtc	.+2      	; 0xf44 <__addsf3x+0x20>
     f42:	e0 95       	com	r30
     f44:	0b 2e       	mov	r0, r27
     f46:	ba 2f       	mov	r27, r26
     f48:	a0 2d       	mov	r26, r0
     f4a:	0b 01       	movw	r0, r22
     f4c:	b9 01       	movw	r22, r18
     f4e:	90 01       	movw	r18, r0
     f50:	0c 01       	movw	r0, r24
     f52:	ca 01       	movw	r24, r20
     f54:	a0 01       	movw	r20, r0
     f56:	11 24       	eor	r1, r1
     f58:	ff 27       	eor	r31, r31
     f5a:	59 1b       	sub	r21, r25
     f5c:	99 f0       	breq	.+38     	; 0xf84 <__addsf3x+0x60>
     f5e:	59 3f       	cpi	r21, 0xF9	; 249
     f60:	50 f4       	brcc	.+20     	; 0xf76 <__addsf3x+0x52>
     f62:	50 3e       	cpi	r21, 0xE0	; 224
     f64:	68 f1       	brcs	.+90     	; 0xfc0 <__addsf3x+0x9c>
     f66:	1a 16       	cp	r1, r26
     f68:	f0 40       	sbci	r31, 0x00	; 0
     f6a:	a2 2f       	mov	r26, r18
     f6c:	23 2f       	mov	r18, r19
     f6e:	34 2f       	mov	r19, r20
     f70:	44 27       	eor	r20, r20
     f72:	58 5f       	subi	r21, 0xF8	; 248
     f74:	f3 cf       	rjmp	.-26     	; 0xf5c <__addsf3x+0x38>
     f76:	46 95       	lsr	r20
     f78:	37 95       	ror	r19
     f7a:	27 95       	ror	r18
     f7c:	a7 95       	ror	r26
     f7e:	f0 40       	sbci	r31, 0x00	; 0
     f80:	53 95       	inc	r21
     f82:	c9 f7       	brne	.-14     	; 0xf76 <__addsf3x+0x52>
     f84:	7e f4       	brtc	.+30     	; 0xfa4 <__addsf3x+0x80>
     f86:	1f 16       	cp	r1, r31
     f88:	ba 0b       	sbc	r27, r26
     f8a:	62 0b       	sbc	r22, r18
     f8c:	73 0b       	sbc	r23, r19
     f8e:	84 0b       	sbc	r24, r20
     f90:	ba f0       	brmi	.+46     	; 0xfc0 <__addsf3x+0x9c>
     f92:	91 50       	subi	r25, 0x01	; 1
     f94:	a1 f0       	breq	.+40     	; 0xfbe <__addsf3x+0x9a>
     f96:	ff 0f       	add	r31, r31
     f98:	bb 1f       	adc	r27, r27
     f9a:	66 1f       	adc	r22, r22
     f9c:	77 1f       	adc	r23, r23
     f9e:	88 1f       	adc	r24, r24
     fa0:	c2 f7       	brpl	.-16     	; 0xf92 <__addsf3x+0x6e>
     fa2:	0e c0       	rjmp	.+28     	; 0xfc0 <__addsf3x+0x9c>
     fa4:	ba 0f       	add	r27, r26
     fa6:	62 1f       	adc	r22, r18
     fa8:	73 1f       	adc	r23, r19
     faa:	84 1f       	adc	r24, r20
     fac:	48 f4       	brcc	.+18     	; 0xfc0 <__addsf3x+0x9c>
     fae:	87 95       	ror	r24
     fb0:	77 95       	ror	r23
     fb2:	67 95       	ror	r22
     fb4:	b7 95       	ror	r27
     fb6:	f7 95       	ror	r31
     fb8:	9e 3f       	cpi	r25, 0xFE	; 254
     fba:	08 f0       	brcs	.+2      	; 0xfbe <__addsf3x+0x9a>
     fbc:	b0 cf       	rjmp	.-160    	; 0xf1e <__addsf3+0x28>
     fbe:	93 95       	inc	r25
     fc0:	88 0f       	add	r24, r24
     fc2:	08 f0       	brcs	.+2      	; 0xfc6 <__addsf3x+0xa2>
     fc4:	99 27       	eor	r25, r25
     fc6:	ee 0f       	add	r30, r30
     fc8:	97 95       	ror	r25
     fca:	87 95       	ror	r24
     fcc:	08 95       	ret

00000fce <__divsf3>:
     fce:	0e 94 fb 07 	call	0xff6	; 0xff6 <__divsf3x>
     fd2:	0c 94 ad 08 	jmp	0x115a	; 0x115a <__fp_round>
     fd6:	0e 94 a6 08 	call	0x114c	; 0x114c <__fp_pscB>
     fda:	58 f0       	brcs	.+22     	; 0xff2 <__divsf3+0x24>
     fdc:	0e 94 9f 08 	call	0x113e	; 0x113e <__fp_pscA>
     fe0:	40 f0       	brcs	.+16     	; 0xff2 <__divsf3+0x24>
     fe2:	29 f4       	brne	.+10     	; 0xfee <__divsf3+0x20>
     fe4:	5f 3f       	cpi	r21, 0xFF	; 255
     fe6:	29 f0       	breq	.+10     	; 0xff2 <__divsf3+0x24>
     fe8:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_inf>
     fec:	51 11       	cpse	r21, r1
     fee:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__fp_szero>
     ff2:	0c 94 9c 08 	jmp	0x1138	; 0x1138 <__fp_nan>

00000ff6 <__divsf3x>:
     ff6:	0e 94 be 08 	call	0x117c	; 0x117c <__fp_split3>
     ffa:	68 f3       	brcs	.-38     	; 0xfd6 <__divsf3+0x8>

00000ffc <__divsf3_pse>:
     ffc:	99 23       	and	r25, r25
     ffe:	b1 f3       	breq	.-20     	; 0xfec <__divsf3+0x1e>
    1000:	55 23       	and	r21, r21
    1002:	91 f3       	breq	.-28     	; 0xfe8 <__divsf3+0x1a>
    1004:	95 1b       	sub	r25, r21
    1006:	55 0b       	sbc	r21, r21
    1008:	bb 27       	eor	r27, r27
    100a:	aa 27       	eor	r26, r26
    100c:	62 17       	cp	r22, r18
    100e:	73 07       	cpc	r23, r19
    1010:	84 07       	cpc	r24, r20
    1012:	38 f0       	brcs	.+14     	; 0x1022 <__divsf3_pse+0x26>
    1014:	9f 5f       	subi	r25, 0xFF	; 255
    1016:	5f 4f       	sbci	r21, 0xFF	; 255
    1018:	22 0f       	add	r18, r18
    101a:	33 1f       	adc	r19, r19
    101c:	44 1f       	adc	r20, r20
    101e:	aa 1f       	adc	r26, r26
    1020:	a9 f3       	breq	.-22     	; 0x100c <__divsf3_pse+0x10>
    1022:	35 d0       	rcall	.+106    	; 0x108e <__divsf3_pse+0x92>
    1024:	0e 2e       	mov	r0, r30
    1026:	3a f0       	brmi	.+14     	; 0x1036 <__divsf3_pse+0x3a>
    1028:	e0 e8       	ldi	r30, 0x80	; 128
    102a:	32 d0       	rcall	.+100    	; 0x1090 <__divsf3_pse+0x94>
    102c:	91 50       	subi	r25, 0x01	; 1
    102e:	50 40       	sbci	r21, 0x00	; 0
    1030:	e6 95       	lsr	r30
    1032:	00 1c       	adc	r0, r0
    1034:	ca f7       	brpl	.-14     	; 0x1028 <__divsf3_pse+0x2c>
    1036:	2b d0       	rcall	.+86     	; 0x108e <__divsf3_pse+0x92>
    1038:	fe 2f       	mov	r31, r30
    103a:	29 d0       	rcall	.+82     	; 0x108e <__divsf3_pse+0x92>
    103c:	66 0f       	add	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	bb 1f       	adc	r27, r27
    1044:	26 17       	cp	r18, r22
    1046:	37 07       	cpc	r19, r23
    1048:	48 07       	cpc	r20, r24
    104a:	ab 07       	cpc	r26, r27
    104c:	b0 e8       	ldi	r27, 0x80	; 128
    104e:	09 f0       	breq	.+2      	; 0x1052 <__divsf3_pse+0x56>
    1050:	bb 0b       	sbc	r27, r27
    1052:	80 2d       	mov	r24, r0
    1054:	bf 01       	movw	r22, r30
    1056:	ff 27       	eor	r31, r31
    1058:	93 58       	subi	r25, 0x83	; 131
    105a:	5f 4f       	sbci	r21, 0xFF	; 255
    105c:	3a f0       	brmi	.+14     	; 0x106c <__divsf3_pse+0x70>
    105e:	9e 3f       	cpi	r25, 0xFE	; 254
    1060:	51 05       	cpc	r21, r1
    1062:	78 f0       	brcs	.+30     	; 0x1082 <__divsf3_pse+0x86>
    1064:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_inf>
    1068:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__fp_szero>
    106c:	5f 3f       	cpi	r21, 0xFF	; 255
    106e:	e4 f3       	brlt	.-8      	; 0x1068 <__divsf3_pse+0x6c>
    1070:	98 3e       	cpi	r25, 0xE8	; 232
    1072:	d4 f3       	brlt	.-12     	; 0x1068 <__divsf3_pse+0x6c>
    1074:	86 95       	lsr	r24
    1076:	77 95       	ror	r23
    1078:	67 95       	ror	r22
    107a:	b7 95       	ror	r27
    107c:	f7 95       	ror	r31
    107e:	9f 5f       	subi	r25, 0xFF	; 255
    1080:	c9 f7       	brne	.-14     	; 0x1074 <__divsf3_pse+0x78>
    1082:	88 0f       	add	r24, r24
    1084:	91 1d       	adc	r25, r1
    1086:	96 95       	lsr	r25
    1088:	87 95       	ror	r24
    108a:	97 f9       	bld	r25, 7
    108c:	08 95       	ret
    108e:	e1 e0       	ldi	r30, 0x01	; 1
    1090:	66 0f       	add	r22, r22
    1092:	77 1f       	adc	r23, r23
    1094:	88 1f       	adc	r24, r24
    1096:	bb 1f       	adc	r27, r27
    1098:	62 17       	cp	r22, r18
    109a:	73 07       	cpc	r23, r19
    109c:	84 07       	cpc	r24, r20
    109e:	ba 07       	cpc	r27, r26
    10a0:	20 f0       	brcs	.+8      	; 0x10aa <__divsf3_pse+0xae>
    10a2:	62 1b       	sub	r22, r18
    10a4:	73 0b       	sbc	r23, r19
    10a6:	84 0b       	sbc	r24, r20
    10a8:	ba 0b       	sbc	r27, r26
    10aa:	ee 1f       	adc	r30, r30
    10ac:	88 f7       	brcc	.-30     	; 0x1090 <__divsf3_pse+0x94>
    10ae:	e0 95       	com	r30
    10b0:	08 95       	ret

000010b2 <__floatunsisf>:
    10b2:	e8 94       	clt
    10b4:	09 c0       	rjmp	.+18     	; 0x10c8 <__floatsisf+0x12>

000010b6 <__floatsisf>:
    10b6:	97 fb       	bst	r25, 7
    10b8:	3e f4       	brtc	.+14     	; 0x10c8 <__floatsisf+0x12>
    10ba:	90 95       	com	r25
    10bc:	80 95       	com	r24
    10be:	70 95       	com	r23
    10c0:	61 95       	neg	r22
    10c2:	7f 4f       	sbci	r23, 0xFF	; 255
    10c4:	8f 4f       	sbci	r24, 0xFF	; 255
    10c6:	9f 4f       	sbci	r25, 0xFF	; 255
    10c8:	99 23       	and	r25, r25
    10ca:	a9 f0       	breq	.+42     	; 0x10f6 <__floatsisf+0x40>
    10cc:	f9 2f       	mov	r31, r25
    10ce:	96 e9       	ldi	r25, 0x96	; 150
    10d0:	bb 27       	eor	r27, r27
    10d2:	93 95       	inc	r25
    10d4:	f6 95       	lsr	r31
    10d6:	87 95       	ror	r24
    10d8:	77 95       	ror	r23
    10da:	67 95       	ror	r22
    10dc:	b7 95       	ror	r27
    10de:	f1 11       	cpse	r31, r1
    10e0:	f8 cf       	rjmp	.-16     	; 0x10d2 <__floatsisf+0x1c>
    10e2:	fa f4       	brpl	.+62     	; 0x1122 <__floatsisf+0x6c>
    10e4:	bb 0f       	add	r27, r27
    10e6:	11 f4       	brne	.+4      	; 0x10ec <__floatsisf+0x36>
    10e8:	60 ff       	sbrs	r22, 0
    10ea:	1b c0       	rjmp	.+54     	; 0x1122 <__floatsisf+0x6c>
    10ec:	6f 5f       	subi	r22, 0xFF	; 255
    10ee:	7f 4f       	sbci	r23, 0xFF	; 255
    10f0:	8f 4f       	sbci	r24, 0xFF	; 255
    10f2:	9f 4f       	sbci	r25, 0xFF	; 255
    10f4:	16 c0       	rjmp	.+44     	; 0x1122 <__floatsisf+0x6c>
    10f6:	88 23       	and	r24, r24
    10f8:	11 f0       	breq	.+4      	; 0x10fe <__floatsisf+0x48>
    10fa:	96 e9       	ldi	r25, 0x96	; 150
    10fc:	11 c0       	rjmp	.+34     	; 0x1120 <__floatsisf+0x6a>
    10fe:	77 23       	and	r23, r23
    1100:	21 f0       	breq	.+8      	; 0x110a <__floatsisf+0x54>
    1102:	9e e8       	ldi	r25, 0x8E	; 142
    1104:	87 2f       	mov	r24, r23
    1106:	76 2f       	mov	r23, r22
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <__floatsisf+0x5e>
    110a:	66 23       	and	r22, r22
    110c:	71 f0       	breq	.+28     	; 0x112a <__floatsisf+0x74>
    110e:	96 e8       	ldi	r25, 0x86	; 134
    1110:	86 2f       	mov	r24, r22
    1112:	70 e0       	ldi	r23, 0x00	; 0
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	2a f0       	brmi	.+10     	; 0x1122 <__floatsisf+0x6c>
    1118:	9a 95       	dec	r25
    111a:	66 0f       	add	r22, r22
    111c:	77 1f       	adc	r23, r23
    111e:	88 1f       	adc	r24, r24
    1120:	da f7       	brpl	.-10     	; 0x1118 <__floatsisf+0x62>
    1122:	88 0f       	add	r24, r24
    1124:	96 95       	lsr	r25
    1126:	87 95       	ror	r24
    1128:	97 f9       	bld	r25, 7
    112a:	08 95       	ret

0000112c <__fp_inf>:
    112c:	97 f9       	bld	r25, 7
    112e:	9f 67       	ori	r25, 0x7F	; 127
    1130:	80 e8       	ldi	r24, 0x80	; 128
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	08 95       	ret

00001138 <__fp_nan>:
    1138:	9f ef       	ldi	r25, 0xFF	; 255
    113a:	80 ec       	ldi	r24, 0xC0	; 192
    113c:	08 95       	ret

0000113e <__fp_pscA>:
    113e:	00 24       	eor	r0, r0
    1140:	0a 94       	dec	r0
    1142:	16 16       	cp	r1, r22
    1144:	17 06       	cpc	r1, r23
    1146:	18 06       	cpc	r1, r24
    1148:	09 06       	cpc	r0, r25
    114a:	08 95       	ret

0000114c <__fp_pscB>:
    114c:	00 24       	eor	r0, r0
    114e:	0a 94       	dec	r0
    1150:	12 16       	cp	r1, r18
    1152:	13 06       	cpc	r1, r19
    1154:	14 06       	cpc	r1, r20
    1156:	05 06       	cpc	r0, r21
    1158:	08 95       	ret

0000115a <__fp_round>:
    115a:	09 2e       	mov	r0, r25
    115c:	03 94       	inc	r0
    115e:	00 0c       	add	r0, r0
    1160:	11 f4       	brne	.+4      	; 0x1166 <__fp_round+0xc>
    1162:	88 23       	and	r24, r24
    1164:	52 f0       	brmi	.+20     	; 0x117a <__fp_round+0x20>
    1166:	bb 0f       	add	r27, r27
    1168:	40 f4       	brcc	.+16     	; 0x117a <__fp_round+0x20>
    116a:	bf 2b       	or	r27, r31
    116c:	11 f4       	brne	.+4      	; 0x1172 <__fp_round+0x18>
    116e:	60 ff       	sbrs	r22, 0
    1170:	04 c0       	rjmp	.+8      	; 0x117a <__fp_round+0x20>
    1172:	6f 5f       	subi	r22, 0xFF	; 255
    1174:	7f 4f       	sbci	r23, 0xFF	; 255
    1176:	8f 4f       	sbci	r24, 0xFF	; 255
    1178:	9f 4f       	sbci	r25, 0xFF	; 255
    117a:	08 95       	ret

0000117c <__fp_split3>:
    117c:	57 fd       	sbrc	r21, 7
    117e:	90 58       	subi	r25, 0x80	; 128
    1180:	44 0f       	add	r20, r20
    1182:	55 1f       	adc	r21, r21
    1184:	59 f0       	breq	.+22     	; 0x119c <__fp_splitA+0x10>
    1186:	5f 3f       	cpi	r21, 0xFF	; 255
    1188:	71 f0       	breq	.+28     	; 0x11a6 <__fp_splitA+0x1a>
    118a:	47 95       	ror	r20

0000118c <__fp_splitA>:
    118c:	88 0f       	add	r24, r24
    118e:	97 fb       	bst	r25, 7
    1190:	99 1f       	adc	r25, r25
    1192:	61 f0       	breq	.+24     	; 0x11ac <__fp_splitA+0x20>
    1194:	9f 3f       	cpi	r25, 0xFF	; 255
    1196:	79 f0       	breq	.+30     	; 0x11b6 <__fp_splitA+0x2a>
    1198:	87 95       	ror	r24
    119a:	08 95       	ret
    119c:	12 16       	cp	r1, r18
    119e:	13 06       	cpc	r1, r19
    11a0:	14 06       	cpc	r1, r20
    11a2:	55 1f       	adc	r21, r21
    11a4:	f2 cf       	rjmp	.-28     	; 0x118a <__fp_split3+0xe>
    11a6:	46 95       	lsr	r20
    11a8:	f1 df       	rcall	.-30     	; 0x118c <__fp_splitA>
    11aa:	08 c0       	rjmp	.+16     	; 0x11bc <__fp_splitA+0x30>
    11ac:	16 16       	cp	r1, r22
    11ae:	17 06       	cpc	r1, r23
    11b0:	18 06       	cpc	r1, r24
    11b2:	99 1f       	adc	r25, r25
    11b4:	f1 cf       	rjmp	.-30     	; 0x1198 <__fp_splitA+0xc>
    11b6:	86 95       	lsr	r24
    11b8:	71 05       	cpc	r23, r1
    11ba:	61 05       	cpc	r22, r1
    11bc:	08 94       	sec
    11be:	08 95       	ret

000011c0 <__fp_zero>:
    11c0:	e8 94       	clt

000011c2 <__fp_szero>:
    11c2:	bb 27       	eor	r27, r27
    11c4:	66 27       	eor	r22, r22
    11c6:	77 27       	eor	r23, r23
    11c8:	cb 01       	movw	r24, r22
    11ca:	97 f9       	bld	r25, 7
    11cc:	08 95       	ret

000011ce <dtostrf>:
    11ce:	ef 92       	push	r14
    11d0:	0f 93       	push	r16
    11d2:	1f 93       	push	r17
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	e8 01       	movw	r28, r16
    11da:	47 fd       	sbrc	r20, 7
    11dc:	02 c0       	rjmp	.+4      	; 0x11e2 <dtostrf+0x14>
    11de:	34 e0       	ldi	r19, 0x04	; 4
    11e0:	01 c0       	rjmp	.+2      	; 0x11e4 <dtostrf+0x16>
    11e2:	34 e1       	ldi	r19, 0x14	; 20
    11e4:	04 2e       	mov	r0, r20
    11e6:	00 0c       	add	r0, r0
    11e8:	55 0b       	sbc	r21, r21
    11ea:	57 ff       	sbrs	r21, 7
    11ec:	03 c0       	rjmp	.+6      	; 0x11f4 <dtostrf+0x26>
    11ee:	51 95       	neg	r21
    11f0:	41 95       	neg	r20
    11f2:	51 09       	sbc	r21, r1
    11f4:	e3 2e       	mov	r14, r19
    11f6:	02 2f       	mov	r16, r18
    11f8:	24 2f       	mov	r18, r20
    11fa:	ae 01       	movw	r20, r28
    11fc:	0e 94 57 0b 	call	0x16ae	; 0x16ae <dtoa_prf>
    1200:	ce 01       	movw	r24, r28
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	1f 91       	pop	r17
    1208:	0f 91       	pop	r16
    120a:	ef 90       	pop	r14
    120c:	08 95       	ret

0000120e <strtok>:
    120e:	42 e3       	ldi	r20, 0x32	; 50
    1210:	51 e0       	ldi	r21, 0x01	; 1
    1212:	0e 94 2d 09 	call	0x125a	; 0x125a <strtok_r>
    1216:	08 95       	ret

00001218 <strcpy>:
    1218:	fb 01       	movw	r30, r22
    121a:	dc 01       	movw	r26, r24
    121c:	01 90       	ld	r0, Z+
    121e:	0d 92       	st	X+, r0
    1220:	00 20       	and	r0, r0
    1222:	e1 f7       	brne	.-8      	; 0x121c <strcpy+0x4>
    1224:	08 95       	ret

00001226 <strstr>:
    1226:	fb 01       	movw	r30, r22
    1228:	51 91       	ld	r21, Z+
    122a:	55 23       	and	r21, r21
    122c:	a9 f0       	breq	.+42     	; 0x1258 <strstr+0x32>
    122e:	bf 01       	movw	r22, r30
    1230:	dc 01       	movw	r26, r24
    1232:	4d 91       	ld	r20, X+
    1234:	45 17       	cp	r20, r21
    1236:	41 11       	cpse	r20, r1
    1238:	e1 f7       	brne	.-8      	; 0x1232 <strstr+0xc>
    123a:	59 f4       	brne	.+22     	; 0x1252 <strstr+0x2c>
    123c:	cd 01       	movw	r24, r26
    123e:	01 90       	ld	r0, Z+
    1240:	00 20       	and	r0, r0
    1242:	49 f0       	breq	.+18     	; 0x1256 <strstr+0x30>
    1244:	4d 91       	ld	r20, X+
    1246:	40 15       	cp	r20, r0
    1248:	41 11       	cpse	r20, r1
    124a:	c9 f3       	breq	.-14     	; 0x123e <strstr+0x18>
    124c:	fb 01       	movw	r30, r22
    124e:	41 11       	cpse	r20, r1
    1250:	ef cf       	rjmp	.-34     	; 0x1230 <strstr+0xa>
    1252:	81 e0       	ldi	r24, 0x01	; 1
    1254:	90 e0       	ldi	r25, 0x00	; 0
    1256:	01 97       	sbiw	r24, 0x01	; 1
    1258:	08 95       	ret

0000125a <strtok_r>:
    125a:	fa 01       	movw	r30, r20
    125c:	a1 91       	ld	r26, Z+
    125e:	b0 81       	ld	r27, Z
    1260:	00 97       	sbiw	r24, 0x00	; 0
    1262:	19 f4       	brne	.+6      	; 0x126a <strtok_r+0x10>
    1264:	10 97       	sbiw	r26, 0x00	; 0
    1266:	e1 f0       	breq	.+56     	; 0x12a0 <strtok_r+0x46>
    1268:	cd 01       	movw	r24, r26
    126a:	dc 01       	movw	r26, r24
    126c:	cd 01       	movw	r24, r26
    126e:	0d 90       	ld	r0, X+
    1270:	00 20       	and	r0, r0
    1272:	11 f4       	brne	.+4      	; 0x1278 <strtok_r+0x1e>
    1274:	c0 01       	movw	r24, r0
    1276:	13 c0       	rjmp	.+38     	; 0x129e <strtok_r+0x44>
    1278:	fb 01       	movw	r30, r22
    127a:	21 91       	ld	r18, Z+
    127c:	22 23       	and	r18, r18
    127e:	19 f0       	breq	.+6      	; 0x1286 <strtok_r+0x2c>
    1280:	20 15       	cp	r18, r0
    1282:	d9 f7       	brne	.-10     	; 0x127a <strtok_r+0x20>
    1284:	f3 cf       	rjmp	.-26     	; 0x126c <strtok_r+0x12>
    1286:	fb 01       	movw	r30, r22
    1288:	21 91       	ld	r18, Z+
    128a:	20 15       	cp	r18, r0
    128c:	19 f4       	brne	.+6      	; 0x1294 <strtok_r+0x3a>
    128e:	1e 92       	st	-X, r1
    1290:	11 96       	adiw	r26, 0x01	; 1
    1292:	06 c0       	rjmp	.+12     	; 0x12a0 <strtok_r+0x46>
    1294:	22 23       	and	r18, r18
    1296:	c1 f7       	brne	.-16     	; 0x1288 <strtok_r+0x2e>
    1298:	0d 90       	ld	r0, X+
    129a:	00 20       	and	r0, r0
    129c:	a1 f7       	brne	.-24     	; 0x1286 <strtok_r+0x2c>
    129e:	d0 01       	movw	r26, r0
    12a0:	fa 01       	movw	r30, r20
    12a2:	a1 93       	st	Z+, r26
    12a4:	b0 83       	st	Z, r27
    12a6:	08 95       	ret

000012a8 <sprintf>:
    12a8:	ae e0       	ldi	r26, 0x0E	; 14
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ea e5       	ldi	r30, 0x5A	; 90
    12ae:	f9 e0       	ldi	r31, 0x09	; 9
    12b0:	0c 94 47 0e 	jmp	0x1c8e	; 0x1c8e <__prologue_saves__+0x1c>
    12b4:	0d 89       	ldd	r16, Y+21	; 0x15
    12b6:	1e 89       	ldd	r17, Y+22	; 0x16
    12b8:	86 e0       	ldi	r24, 0x06	; 6
    12ba:	8c 83       	std	Y+4, r24	; 0x04
    12bc:	1a 83       	std	Y+2, r17	; 0x02
    12be:	09 83       	std	Y+1, r16	; 0x01
    12c0:	8f ef       	ldi	r24, 0xFF	; 255
    12c2:	9f e7       	ldi	r25, 0x7F	; 127
    12c4:	9e 83       	std	Y+6, r25	; 0x06
    12c6:	8d 83       	std	Y+5, r24	; 0x05
    12c8:	ae 01       	movw	r20, r28
    12ca:	47 5e       	subi	r20, 0xE7	; 231
    12cc:	5f 4f       	sbci	r21, 0xFF	; 255
    12ce:	6f 89       	ldd	r22, Y+23	; 0x17
    12d0:	78 8d       	ldd	r23, Y+24	; 0x18
    12d2:	ce 01       	movw	r24, r28
    12d4:	01 96       	adiw	r24, 0x01	; 1
    12d6:	0e 94 76 09 	call	0x12ec	; 0x12ec <vfprintf>
    12da:	ef 81       	ldd	r30, Y+7	; 0x07
    12dc:	f8 85       	ldd	r31, Y+8	; 0x08
    12de:	e0 0f       	add	r30, r16
    12e0:	f1 1f       	adc	r31, r17
    12e2:	10 82       	st	Z, r1
    12e4:	2e 96       	adiw	r28, 0x0e	; 14
    12e6:	e4 e0       	ldi	r30, 0x04	; 4
    12e8:	0c 94 63 0e 	jmp	0x1cc6	; 0x1cc6 <__epilogue_restores__+0x1c>

000012ec <vfprintf>:
    12ec:	ab e0       	ldi	r26, 0x0B	; 11
    12ee:	b0 e0       	ldi	r27, 0x00	; 0
    12f0:	ec e7       	ldi	r30, 0x7C	; 124
    12f2:	f9 e0       	ldi	r31, 0x09	; 9
    12f4:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__prologue_saves__>
    12f8:	6c 01       	movw	r12, r24
    12fa:	7b 01       	movw	r14, r22
    12fc:	8a 01       	movw	r16, r20
    12fe:	fc 01       	movw	r30, r24
    1300:	17 82       	std	Z+7, r1	; 0x07
    1302:	16 82       	std	Z+6, r1	; 0x06
    1304:	83 81       	ldd	r24, Z+3	; 0x03
    1306:	81 ff       	sbrs	r24, 1
    1308:	cc c1       	rjmp	.+920    	; 0x16a2 <vfprintf+0x3b6>
    130a:	ce 01       	movw	r24, r28
    130c:	01 96       	adiw	r24, 0x01	; 1
    130e:	3c 01       	movw	r6, r24
    1310:	f6 01       	movw	r30, r12
    1312:	93 81       	ldd	r25, Z+3	; 0x03
    1314:	f7 01       	movw	r30, r14
    1316:	93 fd       	sbrc	r25, 3
    1318:	85 91       	lpm	r24, Z+
    131a:	93 ff       	sbrs	r25, 3
    131c:	81 91       	ld	r24, Z+
    131e:	7f 01       	movw	r14, r30
    1320:	88 23       	and	r24, r24
    1322:	09 f4       	brne	.+2      	; 0x1326 <vfprintf+0x3a>
    1324:	ba c1       	rjmp	.+884    	; 0x169a <vfprintf+0x3ae>
    1326:	85 32       	cpi	r24, 0x25	; 37
    1328:	39 f4       	brne	.+14     	; 0x1338 <vfprintf+0x4c>
    132a:	93 fd       	sbrc	r25, 3
    132c:	85 91       	lpm	r24, Z+
    132e:	93 ff       	sbrs	r25, 3
    1330:	81 91       	ld	r24, Z+
    1332:	7f 01       	movw	r14, r30
    1334:	85 32       	cpi	r24, 0x25	; 37
    1336:	29 f4       	brne	.+10     	; 0x1342 <vfprintf+0x56>
    1338:	b6 01       	movw	r22, r12
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <fputc>
    1340:	e7 cf       	rjmp	.-50     	; 0x1310 <vfprintf+0x24>
    1342:	91 2c       	mov	r9, r1
    1344:	21 2c       	mov	r2, r1
    1346:	31 2c       	mov	r3, r1
    1348:	ff e1       	ldi	r31, 0x1F	; 31
    134a:	f3 15       	cp	r31, r3
    134c:	d8 f0       	brcs	.+54     	; 0x1384 <vfprintf+0x98>
    134e:	8b 32       	cpi	r24, 0x2B	; 43
    1350:	79 f0       	breq	.+30     	; 0x1370 <vfprintf+0x84>
    1352:	38 f4       	brcc	.+14     	; 0x1362 <vfprintf+0x76>
    1354:	80 32       	cpi	r24, 0x20	; 32
    1356:	79 f0       	breq	.+30     	; 0x1376 <vfprintf+0x8a>
    1358:	83 32       	cpi	r24, 0x23	; 35
    135a:	a1 f4       	brne	.+40     	; 0x1384 <vfprintf+0x98>
    135c:	23 2d       	mov	r18, r3
    135e:	20 61       	ori	r18, 0x10	; 16
    1360:	1d c0       	rjmp	.+58     	; 0x139c <vfprintf+0xb0>
    1362:	8d 32       	cpi	r24, 0x2D	; 45
    1364:	61 f0       	breq	.+24     	; 0x137e <vfprintf+0x92>
    1366:	80 33       	cpi	r24, 0x30	; 48
    1368:	69 f4       	brne	.+26     	; 0x1384 <vfprintf+0x98>
    136a:	23 2d       	mov	r18, r3
    136c:	21 60       	ori	r18, 0x01	; 1
    136e:	16 c0       	rjmp	.+44     	; 0x139c <vfprintf+0xb0>
    1370:	83 2d       	mov	r24, r3
    1372:	82 60       	ori	r24, 0x02	; 2
    1374:	38 2e       	mov	r3, r24
    1376:	e3 2d       	mov	r30, r3
    1378:	e4 60       	ori	r30, 0x04	; 4
    137a:	3e 2e       	mov	r3, r30
    137c:	2a c0       	rjmp	.+84     	; 0x13d2 <vfprintf+0xe6>
    137e:	f3 2d       	mov	r31, r3
    1380:	f8 60       	ori	r31, 0x08	; 8
    1382:	1d c0       	rjmp	.+58     	; 0x13be <vfprintf+0xd2>
    1384:	37 fc       	sbrc	r3, 7
    1386:	2d c0       	rjmp	.+90     	; 0x13e2 <vfprintf+0xf6>
    1388:	20 ed       	ldi	r18, 0xD0	; 208
    138a:	28 0f       	add	r18, r24
    138c:	2a 30       	cpi	r18, 0x0A	; 10
    138e:	40 f0       	brcs	.+16     	; 0x13a0 <vfprintf+0xb4>
    1390:	8e 32       	cpi	r24, 0x2E	; 46
    1392:	b9 f4       	brne	.+46     	; 0x13c2 <vfprintf+0xd6>
    1394:	36 fc       	sbrc	r3, 6
    1396:	81 c1       	rjmp	.+770    	; 0x169a <vfprintf+0x3ae>
    1398:	23 2d       	mov	r18, r3
    139a:	20 64       	ori	r18, 0x40	; 64
    139c:	32 2e       	mov	r3, r18
    139e:	19 c0       	rjmp	.+50     	; 0x13d2 <vfprintf+0xe6>
    13a0:	36 fe       	sbrs	r3, 6
    13a2:	06 c0       	rjmp	.+12     	; 0x13b0 <vfprintf+0xc4>
    13a4:	8a e0       	ldi	r24, 0x0A	; 10
    13a6:	98 9e       	mul	r9, r24
    13a8:	20 0d       	add	r18, r0
    13aa:	11 24       	eor	r1, r1
    13ac:	92 2e       	mov	r9, r18
    13ae:	11 c0       	rjmp	.+34     	; 0x13d2 <vfprintf+0xe6>
    13b0:	ea e0       	ldi	r30, 0x0A	; 10
    13b2:	2e 9e       	mul	r2, r30
    13b4:	20 0d       	add	r18, r0
    13b6:	11 24       	eor	r1, r1
    13b8:	22 2e       	mov	r2, r18
    13ba:	f3 2d       	mov	r31, r3
    13bc:	f0 62       	ori	r31, 0x20	; 32
    13be:	3f 2e       	mov	r3, r31
    13c0:	08 c0       	rjmp	.+16     	; 0x13d2 <vfprintf+0xe6>
    13c2:	8c 36       	cpi	r24, 0x6C	; 108
    13c4:	21 f4       	brne	.+8      	; 0x13ce <vfprintf+0xe2>
    13c6:	83 2d       	mov	r24, r3
    13c8:	80 68       	ori	r24, 0x80	; 128
    13ca:	38 2e       	mov	r3, r24
    13cc:	02 c0       	rjmp	.+4      	; 0x13d2 <vfprintf+0xe6>
    13ce:	88 36       	cpi	r24, 0x68	; 104
    13d0:	41 f4       	brne	.+16     	; 0x13e2 <vfprintf+0xf6>
    13d2:	f7 01       	movw	r30, r14
    13d4:	93 fd       	sbrc	r25, 3
    13d6:	85 91       	lpm	r24, Z+
    13d8:	93 ff       	sbrs	r25, 3
    13da:	81 91       	ld	r24, Z+
    13dc:	7f 01       	movw	r14, r30
    13de:	81 11       	cpse	r24, r1
    13e0:	b3 cf       	rjmp	.-154    	; 0x1348 <vfprintf+0x5c>
    13e2:	98 2f       	mov	r25, r24
    13e4:	9f 7d       	andi	r25, 0xDF	; 223
    13e6:	95 54       	subi	r25, 0x45	; 69
    13e8:	93 30       	cpi	r25, 0x03	; 3
    13ea:	28 f4       	brcc	.+10     	; 0x13f6 <vfprintf+0x10a>
    13ec:	0c 5f       	subi	r16, 0xFC	; 252
    13ee:	1f 4f       	sbci	r17, 0xFF	; 255
    13f0:	9f e3       	ldi	r25, 0x3F	; 63
    13f2:	99 83       	std	Y+1, r25	; 0x01
    13f4:	0d c0       	rjmp	.+26     	; 0x1410 <vfprintf+0x124>
    13f6:	83 36       	cpi	r24, 0x63	; 99
    13f8:	31 f0       	breq	.+12     	; 0x1406 <vfprintf+0x11a>
    13fa:	83 37       	cpi	r24, 0x73	; 115
    13fc:	71 f0       	breq	.+28     	; 0x141a <vfprintf+0x12e>
    13fe:	83 35       	cpi	r24, 0x53	; 83
    1400:	09 f0       	breq	.+2      	; 0x1404 <vfprintf+0x118>
    1402:	59 c0       	rjmp	.+178    	; 0x14b6 <vfprintf+0x1ca>
    1404:	21 c0       	rjmp	.+66     	; 0x1448 <vfprintf+0x15c>
    1406:	f8 01       	movw	r30, r16
    1408:	80 81       	ld	r24, Z
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	0e 5f       	subi	r16, 0xFE	; 254
    140e:	1f 4f       	sbci	r17, 0xFF	; 255
    1410:	88 24       	eor	r8, r8
    1412:	83 94       	inc	r8
    1414:	91 2c       	mov	r9, r1
    1416:	53 01       	movw	r10, r6
    1418:	13 c0       	rjmp	.+38     	; 0x1440 <vfprintf+0x154>
    141a:	28 01       	movw	r4, r16
    141c:	f2 e0       	ldi	r31, 0x02	; 2
    141e:	4f 0e       	add	r4, r31
    1420:	51 1c       	adc	r5, r1
    1422:	f8 01       	movw	r30, r16
    1424:	a0 80       	ld	r10, Z
    1426:	b1 80       	ldd	r11, Z+1	; 0x01
    1428:	36 fe       	sbrs	r3, 6
    142a:	03 c0       	rjmp	.+6      	; 0x1432 <vfprintf+0x146>
    142c:	69 2d       	mov	r22, r9
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	02 c0       	rjmp	.+4      	; 0x1436 <vfprintf+0x14a>
    1432:	6f ef       	ldi	r22, 0xFF	; 255
    1434:	7f ef       	ldi	r23, 0xFF	; 255
    1436:	c5 01       	movw	r24, r10
    1438:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <strnlen>
    143c:	4c 01       	movw	r8, r24
    143e:	82 01       	movw	r16, r4
    1440:	f3 2d       	mov	r31, r3
    1442:	ff 77       	andi	r31, 0x7F	; 127
    1444:	3f 2e       	mov	r3, r31
    1446:	16 c0       	rjmp	.+44     	; 0x1474 <vfprintf+0x188>
    1448:	28 01       	movw	r4, r16
    144a:	22 e0       	ldi	r18, 0x02	; 2
    144c:	42 0e       	add	r4, r18
    144e:	51 1c       	adc	r5, r1
    1450:	f8 01       	movw	r30, r16
    1452:	a0 80       	ld	r10, Z
    1454:	b1 80       	ldd	r11, Z+1	; 0x01
    1456:	36 fe       	sbrs	r3, 6
    1458:	03 c0       	rjmp	.+6      	; 0x1460 <vfprintf+0x174>
    145a:	69 2d       	mov	r22, r9
    145c:	70 e0       	ldi	r23, 0x00	; 0
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <vfprintf+0x178>
    1460:	6f ef       	ldi	r22, 0xFF	; 255
    1462:	7f ef       	ldi	r23, 0xFF	; 255
    1464:	c5 01       	movw	r24, r10
    1466:	0e 94 89 0d 	call	0x1b12	; 0x1b12 <strnlen_P>
    146a:	4c 01       	movw	r8, r24
    146c:	f3 2d       	mov	r31, r3
    146e:	f0 68       	ori	r31, 0x80	; 128
    1470:	3f 2e       	mov	r3, r31
    1472:	82 01       	movw	r16, r4
    1474:	33 fc       	sbrc	r3, 3
    1476:	1b c0       	rjmp	.+54     	; 0x14ae <vfprintf+0x1c2>
    1478:	82 2d       	mov	r24, r2
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	88 16       	cp	r8, r24
    147e:	99 06       	cpc	r9, r25
    1480:	b0 f4       	brcc	.+44     	; 0x14ae <vfprintf+0x1c2>
    1482:	b6 01       	movw	r22, r12
    1484:	80 e2       	ldi	r24, 0x20	; 32
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <fputc>
    148c:	2a 94       	dec	r2
    148e:	f4 cf       	rjmp	.-24     	; 0x1478 <vfprintf+0x18c>
    1490:	f5 01       	movw	r30, r10
    1492:	37 fc       	sbrc	r3, 7
    1494:	85 91       	lpm	r24, Z+
    1496:	37 fe       	sbrs	r3, 7
    1498:	81 91       	ld	r24, Z+
    149a:	5f 01       	movw	r10, r30
    149c:	b6 01       	movw	r22, r12
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <fputc>
    14a4:	21 10       	cpse	r2, r1
    14a6:	2a 94       	dec	r2
    14a8:	21 e0       	ldi	r18, 0x01	; 1
    14aa:	82 1a       	sub	r8, r18
    14ac:	91 08       	sbc	r9, r1
    14ae:	81 14       	cp	r8, r1
    14b0:	91 04       	cpc	r9, r1
    14b2:	71 f7       	brne	.-36     	; 0x1490 <vfprintf+0x1a4>
    14b4:	e8 c0       	rjmp	.+464    	; 0x1686 <vfprintf+0x39a>
    14b6:	84 36       	cpi	r24, 0x64	; 100
    14b8:	11 f0       	breq	.+4      	; 0x14be <vfprintf+0x1d2>
    14ba:	89 36       	cpi	r24, 0x69	; 105
    14bc:	41 f5       	brne	.+80     	; 0x150e <vfprintf+0x222>
    14be:	f8 01       	movw	r30, r16
    14c0:	37 fe       	sbrs	r3, 7
    14c2:	07 c0       	rjmp	.+14     	; 0x14d2 <vfprintf+0x1e6>
    14c4:	60 81       	ld	r22, Z
    14c6:	71 81       	ldd	r23, Z+1	; 0x01
    14c8:	82 81       	ldd	r24, Z+2	; 0x02
    14ca:	93 81       	ldd	r25, Z+3	; 0x03
    14cc:	0c 5f       	subi	r16, 0xFC	; 252
    14ce:	1f 4f       	sbci	r17, 0xFF	; 255
    14d0:	08 c0       	rjmp	.+16     	; 0x14e2 <vfprintf+0x1f6>
    14d2:	60 81       	ld	r22, Z
    14d4:	71 81       	ldd	r23, Z+1	; 0x01
    14d6:	07 2e       	mov	r0, r23
    14d8:	00 0c       	add	r0, r0
    14da:	88 0b       	sbc	r24, r24
    14dc:	99 0b       	sbc	r25, r25
    14de:	0e 5f       	subi	r16, 0xFE	; 254
    14e0:	1f 4f       	sbci	r17, 0xFF	; 255
    14e2:	f3 2d       	mov	r31, r3
    14e4:	ff 76       	andi	r31, 0x6F	; 111
    14e6:	3f 2e       	mov	r3, r31
    14e8:	97 ff       	sbrs	r25, 7
    14ea:	09 c0       	rjmp	.+18     	; 0x14fe <vfprintf+0x212>
    14ec:	90 95       	com	r25
    14ee:	80 95       	com	r24
    14f0:	70 95       	com	r23
    14f2:	61 95       	neg	r22
    14f4:	7f 4f       	sbci	r23, 0xFF	; 255
    14f6:	8f 4f       	sbci	r24, 0xFF	; 255
    14f8:	9f 4f       	sbci	r25, 0xFF	; 255
    14fa:	f0 68       	ori	r31, 0x80	; 128
    14fc:	3f 2e       	mov	r3, r31
    14fe:	2a e0       	ldi	r18, 0x0A	; 10
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	a3 01       	movw	r20, r6
    1504:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__ultoa_invert>
    1508:	88 2e       	mov	r8, r24
    150a:	86 18       	sub	r8, r6
    150c:	45 c0       	rjmp	.+138    	; 0x1598 <vfprintf+0x2ac>
    150e:	85 37       	cpi	r24, 0x75	; 117
    1510:	31 f4       	brne	.+12     	; 0x151e <vfprintf+0x232>
    1512:	23 2d       	mov	r18, r3
    1514:	2f 7e       	andi	r18, 0xEF	; 239
    1516:	b2 2e       	mov	r11, r18
    1518:	2a e0       	ldi	r18, 0x0A	; 10
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	25 c0       	rjmp	.+74     	; 0x1568 <vfprintf+0x27c>
    151e:	93 2d       	mov	r25, r3
    1520:	99 7f       	andi	r25, 0xF9	; 249
    1522:	b9 2e       	mov	r11, r25
    1524:	8f 36       	cpi	r24, 0x6F	; 111
    1526:	c1 f0       	breq	.+48     	; 0x1558 <vfprintf+0x26c>
    1528:	18 f4       	brcc	.+6      	; 0x1530 <vfprintf+0x244>
    152a:	88 35       	cpi	r24, 0x58	; 88
    152c:	79 f0       	breq	.+30     	; 0x154c <vfprintf+0x260>
    152e:	b5 c0       	rjmp	.+362    	; 0x169a <vfprintf+0x3ae>
    1530:	80 37       	cpi	r24, 0x70	; 112
    1532:	19 f0       	breq	.+6      	; 0x153a <vfprintf+0x24e>
    1534:	88 37       	cpi	r24, 0x78	; 120
    1536:	21 f0       	breq	.+8      	; 0x1540 <vfprintf+0x254>
    1538:	b0 c0       	rjmp	.+352    	; 0x169a <vfprintf+0x3ae>
    153a:	e9 2f       	mov	r30, r25
    153c:	e0 61       	ori	r30, 0x10	; 16
    153e:	be 2e       	mov	r11, r30
    1540:	b4 fe       	sbrs	r11, 4
    1542:	0d c0       	rjmp	.+26     	; 0x155e <vfprintf+0x272>
    1544:	fb 2d       	mov	r31, r11
    1546:	f4 60       	ori	r31, 0x04	; 4
    1548:	bf 2e       	mov	r11, r31
    154a:	09 c0       	rjmp	.+18     	; 0x155e <vfprintf+0x272>
    154c:	34 fe       	sbrs	r3, 4
    154e:	0a c0       	rjmp	.+20     	; 0x1564 <vfprintf+0x278>
    1550:	29 2f       	mov	r18, r25
    1552:	26 60       	ori	r18, 0x06	; 6
    1554:	b2 2e       	mov	r11, r18
    1556:	06 c0       	rjmp	.+12     	; 0x1564 <vfprintf+0x278>
    1558:	28 e0       	ldi	r18, 0x08	; 8
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	05 c0       	rjmp	.+10     	; 0x1568 <vfprintf+0x27c>
    155e:	20 e1       	ldi	r18, 0x10	; 16
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <vfprintf+0x27c>
    1564:	20 e1       	ldi	r18, 0x10	; 16
    1566:	32 e0       	ldi	r19, 0x02	; 2
    1568:	f8 01       	movw	r30, r16
    156a:	b7 fe       	sbrs	r11, 7
    156c:	07 c0       	rjmp	.+14     	; 0x157c <vfprintf+0x290>
    156e:	60 81       	ld	r22, Z
    1570:	71 81       	ldd	r23, Z+1	; 0x01
    1572:	82 81       	ldd	r24, Z+2	; 0x02
    1574:	93 81       	ldd	r25, Z+3	; 0x03
    1576:	0c 5f       	subi	r16, 0xFC	; 252
    1578:	1f 4f       	sbci	r17, 0xFF	; 255
    157a:	06 c0       	rjmp	.+12     	; 0x1588 <vfprintf+0x29c>
    157c:	60 81       	ld	r22, Z
    157e:	71 81       	ldd	r23, Z+1	; 0x01
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 5f       	subi	r16, 0xFE	; 254
    1586:	1f 4f       	sbci	r17, 0xFF	; 255
    1588:	a3 01       	movw	r20, r6
    158a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__ultoa_invert>
    158e:	88 2e       	mov	r8, r24
    1590:	86 18       	sub	r8, r6
    1592:	fb 2d       	mov	r31, r11
    1594:	ff 77       	andi	r31, 0x7F	; 127
    1596:	3f 2e       	mov	r3, r31
    1598:	36 fe       	sbrs	r3, 6
    159a:	0d c0       	rjmp	.+26     	; 0x15b6 <vfprintf+0x2ca>
    159c:	23 2d       	mov	r18, r3
    159e:	2e 7f       	andi	r18, 0xFE	; 254
    15a0:	a2 2e       	mov	r10, r18
    15a2:	89 14       	cp	r8, r9
    15a4:	58 f4       	brcc	.+22     	; 0x15bc <vfprintf+0x2d0>
    15a6:	34 fe       	sbrs	r3, 4
    15a8:	0b c0       	rjmp	.+22     	; 0x15c0 <vfprintf+0x2d4>
    15aa:	32 fc       	sbrc	r3, 2
    15ac:	09 c0       	rjmp	.+18     	; 0x15c0 <vfprintf+0x2d4>
    15ae:	83 2d       	mov	r24, r3
    15b0:	8e 7e       	andi	r24, 0xEE	; 238
    15b2:	a8 2e       	mov	r10, r24
    15b4:	05 c0       	rjmp	.+10     	; 0x15c0 <vfprintf+0x2d4>
    15b6:	b8 2c       	mov	r11, r8
    15b8:	a3 2c       	mov	r10, r3
    15ba:	03 c0       	rjmp	.+6      	; 0x15c2 <vfprintf+0x2d6>
    15bc:	b8 2c       	mov	r11, r8
    15be:	01 c0       	rjmp	.+2      	; 0x15c2 <vfprintf+0x2d6>
    15c0:	b9 2c       	mov	r11, r9
    15c2:	a4 fe       	sbrs	r10, 4
    15c4:	0f c0       	rjmp	.+30     	; 0x15e4 <vfprintf+0x2f8>
    15c6:	fe 01       	movw	r30, r28
    15c8:	e8 0d       	add	r30, r8
    15ca:	f1 1d       	adc	r31, r1
    15cc:	80 81       	ld	r24, Z
    15ce:	80 33       	cpi	r24, 0x30	; 48
    15d0:	21 f4       	brne	.+8      	; 0x15da <vfprintf+0x2ee>
    15d2:	9a 2d       	mov	r25, r10
    15d4:	99 7e       	andi	r25, 0xE9	; 233
    15d6:	a9 2e       	mov	r10, r25
    15d8:	09 c0       	rjmp	.+18     	; 0x15ec <vfprintf+0x300>
    15da:	a2 fe       	sbrs	r10, 2
    15dc:	06 c0       	rjmp	.+12     	; 0x15ea <vfprintf+0x2fe>
    15de:	b3 94       	inc	r11
    15e0:	b3 94       	inc	r11
    15e2:	04 c0       	rjmp	.+8      	; 0x15ec <vfprintf+0x300>
    15e4:	8a 2d       	mov	r24, r10
    15e6:	86 78       	andi	r24, 0x86	; 134
    15e8:	09 f0       	breq	.+2      	; 0x15ec <vfprintf+0x300>
    15ea:	b3 94       	inc	r11
    15ec:	a3 fc       	sbrc	r10, 3
    15ee:	11 c0       	rjmp	.+34     	; 0x1612 <vfprintf+0x326>
    15f0:	a0 fe       	sbrs	r10, 0
    15f2:	06 c0       	rjmp	.+12     	; 0x1600 <vfprintf+0x314>
    15f4:	b2 14       	cp	r11, r2
    15f6:	88 f4       	brcc	.+34     	; 0x161a <vfprintf+0x32e>
    15f8:	28 0c       	add	r2, r8
    15fa:	92 2c       	mov	r9, r2
    15fc:	9b 18       	sub	r9, r11
    15fe:	0e c0       	rjmp	.+28     	; 0x161c <vfprintf+0x330>
    1600:	b2 14       	cp	r11, r2
    1602:	60 f4       	brcc	.+24     	; 0x161c <vfprintf+0x330>
    1604:	b6 01       	movw	r22, r12
    1606:	80 e2       	ldi	r24, 0x20	; 32
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <fputc>
    160e:	b3 94       	inc	r11
    1610:	f7 cf       	rjmp	.-18     	; 0x1600 <vfprintf+0x314>
    1612:	b2 14       	cp	r11, r2
    1614:	18 f4       	brcc	.+6      	; 0x161c <vfprintf+0x330>
    1616:	2b 18       	sub	r2, r11
    1618:	02 c0       	rjmp	.+4      	; 0x161e <vfprintf+0x332>
    161a:	98 2c       	mov	r9, r8
    161c:	21 2c       	mov	r2, r1
    161e:	a4 fe       	sbrs	r10, 4
    1620:	10 c0       	rjmp	.+32     	; 0x1642 <vfprintf+0x356>
    1622:	b6 01       	movw	r22, r12
    1624:	80 e3       	ldi	r24, 0x30	; 48
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <fputc>
    162c:	a2 fe       	sbrs	r10, 2
    162e:	17 c0       	rjmp	.+46     	; 0x165e <vfprintf+0x372>
    1630:	a1 fc       	sbrc	r10, 1
    1632:	03 c0       	rjmp	.+6      	; 0x163a <vfprintf+0x34e>
    1634:	88 e7       	ldi	r24, 0x78	; 120
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	02 c0       	rjmp	.+4      	; 0x163e <vfprintf+0x352>
    163a:	88 e5       	ldi	r24, 0x58	; 88
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	b6 01       	movw	r22, r12
    1640:	0c c0       	rjmp	.+24     	; 0x165a <vfprintf+0x36e>
    1642:	8a 2d       	mov	r24, r10
    1644:	86 78       	andi	r24, 0x86	; 134
    1646:	59 f0       	breq	.+22     	; 0x165e <vfprintf+0x372>
    1648:	a1 fe       	sbrs	r10, 1
    164a:	02 c0       	rjmp	.+4      	; 0x1650 <vfprintf+0x364>
    164c:	8b e2       	ldi	r24, 0x2B	; 43
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <vfprintf+0x366>
    1650:	80 e2       	ldi	r24, 0x20	; 32
    1652:	a7 fc       	sbrc	r10, 7
    1654:	8d e2       	ldi	r24, 0x2D	; 45
    1656:	b6 01       	movw	r22, r12
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <fputc>
    165e:	89 14       	cp	r8, r9
    1660:	38 f4       	brcc	.+14     	; 0x1670 <vfprintf+0x384>
    1662:	b6 01       	movw	r22, r12
    1664:	80 e3       	ldi	r24, 0x30	; 48
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <fputc>
    166c:	9a 94       	dec	r9
    166e:	f7 cf       	rjmp	.-18     	; 0x165e <vfprintf+0x372>
    1670:	8a 94       	dec	r8
    1672:	f3 01       	movw	r30, r6
    1674:	e8 0d       	add	r30, r8
    1676:	f1 1d       	adc	r31, r1
    1678:	80 81       	ld	r24, Z
    167a:	b6 01       	movw	r22, r12
    167c:	90 e0       	ldi	r25, 0x00	; 0
    167e:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <fputc>
    1682:	81 10       	cpse	r8, r1
    1684:	f5 cf       	rjmp	.-22     	; 0x1670 <vfprintf+0x384>
    1686:	22 20       	and	r2, r2
    1688:	09 f4       	brne	.+2      	; 0x168c <vfprintf+0x3a0>
    168a:	42 ce       	rjmp	.-892    	; 0x1310 <vfprintf+0x24>
    168c:	b6 01       	movw	r22, r12
    168e:	80 e2       	ldi	r24, 0x20	; 32
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <fputc>
    1696:	2a 94       	dec	r2
    1698:	f6 cf       	rjmp	.-20     	; 0x1686 <vfprintf+0x39a>
    169a:	f6 01       	movw	r30, r12
    169c:	86 81       	ldd	r24, Z+6	; 0x06
    169e:	97 81       	ldd	r25, Z+7	; 0x07
    16a0:	02 c0       	rjmp	.+4      	; 0x16a6 <vfprintf+0x3ba>
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
    16a4:	9f ef       	ldi	r25, 0xFF	; 255
    16a6:	2b 96       	adiw	r28, 0x0b	; 11
    16a8:	e2 e1       	ldi	r30, 0x12	; 18
    16aa:	0c 94 55 0e 	jmp	0x1caa	; 0x1caa <__epilogue_restores__>

000016ae <dtoa_prf>:
    16ae:	a9 e0       	ldi	r26, 0x09	; 9
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	ed e5       	ldi	r30, 0x5D	; 93
    16b4:	fb e0       	ldi	r31, 0x0B	; 11
    16b6:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__prologue_saves__+0xc>
    16ba:	6a 01       	movw	r12, r20
    16bc:	12 2f       	mov	r17, r18
    16be:	b0 2e       	mov	r11, r16
    16c0:	2b e3       	ldi	r18, 0x3B	; 59
    16c2:	20 17       	cp	r18, r16
    16c4:	20 f0       	brcs	.+8      	; 0x16ce <dtoa_prf+0x20>
    16c6:	ff 24       	eor	r15, r15
    16c8:	f3 94       	inc	r15
    16ca:	f0 0e       	add	r15, r16
    16cc:	02 c0       	rjmp	.+4      	; 0x16d2 <dtoa_prf+0x24>
    16ce:	2c e3       	ldi	r18, 0x3C	; 60
    16d0:	f2 2e       	mov	r15, r18
    16d2:	0f 2d       	mov	r16, r15
    16d4:	27 e0       	ldi	r18, 0x07	; 7
    16d6:	ae 01       	movw	r20, r28
    16d8:	4f 5f       	subi	r20, 0xFF	; 255
    16da:	5f 4f       	sbci	r21, 0xFF	; 255
    16dc:	0e 94 b1 0c 	call	0x1962	; 0x1962 <__ftoa_engine>
    16e0:	bc 01       	movw	r22, r24
    16e2:	49 81       	ldd	r20, Y+1	; 0x01
    16e4:	84 2f       	mov	r24, r20
    16e6:	89 70       	andi	r24, 0x09	; 9
    16e8:	81 30       	cpi	r24, 0x01	; 1
    16ea:	31 f0       	breq	.+12     	; 0x16f8 <dtoa_prf+0x4a>
    16ec:	e1 fc       	sbrc	r14, 1
    16ee:	06 c0       	rjmp	.+12     	; 0x16fc <dtoa_prf+0x4e>
    16f0:	e0 fe       	sbrs	r14, 0
    16f2:	06 c0       	rjmp	.+12     	; 0x1700 <dtoa_prf+0x52>
    16f4:	90 e2       	ldi	r25, 0x20	; 32
    16f6:	05 c0       	rjmp	.+10     	; 0x1702 <dtoa_prf+0x54>
    16f8:	9d e2       	ldi	r25, 0x2D	; 45
    16fa:	03 c0       	rjmp	.+6      	; 0x1702 <dtoa_prf+0x54>
    16fc:	9b e2       	ldi	r25, 0x2B	; 43
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <dtoa_prf+0x54>
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	5e 2d       	mov	r21, r14
    1704:	50 71       	andi	r21, 0x10	; 16
    1706:	43 ff       	sbrs	r20, 3
    1708:	3c c0       	rjmp	.+120    	; 0x1782 <dtoa_prf+0xd4>
    170a:	91 11       	cpse	r25, r1
    170c:	02 c0       	rjmp	.+4      	; 0x1712 <dtoa_prf+0x64>
    170e:	83 e0       	ldi	r24, 0x03	; 3
    1710:	01 c0       	rjmp	.+2      	; 0x1714 <dtoa_prf+0x66>
    1712:	84 e0       	ldi	r24, 0x04	; 4
    1714:	81 17       	cp	r24, r17
    1716:	18 f4       	brcc	.+6      	; 0x171e <dtoa_prf+0x70>
    1718:	21 2f       	mov	r18, r17
    171a:	28 1b       	sub	r18, r24
    171c:	01 c0       	rjmp	.+2      	; 0x1720 <dtoa_prf+0x72>
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	51 11       	cpse	r21, r1
    1722:	0b c0       	rjmp	.+22     	; 0x173a <dtoa_prf+0x8c>
    1724:	f6 01       	movw	r30, r12
    1726:	82 2f       	mov	r24, r18
    1728:	30 e2       	ldi	r19, 0x20	; 32
    172a:	88 23       	and	r24, r24
    172c:	19 f0       	breq	.+6      	; 0x1734 <dtoa_prf+0x86>
    172e:	31 93       	st	Z+, r19
    1730:	81 50       	subi	r24, 0x01	; 1
    1732:	fb cf       	rjmp	.-10     	; 0x172a <dtoa_prf+0x7c>
    1734:	c2 0e       	add	r12, r18
    1736:	d1 1c       	adc	r13, r1
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	99 23       	and	r25, r25
    173c:	29 f0       	breq	.+10     	; 0x1748 <dtoa_prf+0x9a>
    173e:	d6 01       	movw	r26, r12
    1740:	9c 93       	st	X, r25
    1742:	f6 01       	movw	r30, r12
    1744:	31 96       	adiw	r30, 0x01	; 1
    1746:	6f 01       	movw	r12, r30
    1748:	c6 01       	movw	r24, r12
    174a:	03 96       	adiw	r24, 0x03	; 3
    174c:	e2 fe       	sbrs	r14, 2
    174e:	0a c0       	rjmp	.+20     	; 0x1764 <dtoa_prf+0xb6>
    1750:	3e e4       	ldi	r19, 0x4E	; 78
    1752:	d6 01       	movw	r26, r12
    1754:	3c 93       	st	X, r19
    1756:	41 e4       	ldi	r20, 0x41	; 65
    1758:	11 96       	adiw	r26, 0x01	; 1
    175a:	4c 93       	st	X, r20
    175c:	11 97       	sbiw	r26, 0x01	; 1
    175e:	12 96       	adiw	r26, 0x02	; 2
    1760:	3c 93       	st	X, r19
    1762:	06 c0       	rjmp	.+12     	; 0x1770 <dtoa_prf+0xc2>
    1764:	3e e6       	ldi	r19, 0x6E	; 110
    1766:	f6 01       	movw	r30, r12
    1768:	30 83       	st	Z, r19
    176a:	41 e6       	ldi	r20, 0x61	; 97
    176c:	41 83       	std	Z+1, r20	; 0x01
    176e:	32 83       	std	Z+2, r19	; 0x02
    1770:	fc 01       	movw	r30, r24
    1772:	32 2f       	mov	r19, r18
    1774:	40 e2       	ldi	r20, 0x20	; 32
    1776:	33 23       	and	r19, r19
    1778:	09 f4       	brne	.+2      	; 0x177c <dtoa_prf+0xce>
    177a:	42 c0       	rjmp	.+132    	; 0x1800 <dtoa_prf+0x152>
    177c:	41 93       	st	Z+, r20
    177e:	31 50       	subi	r19, 0x01	; 1
    1780:	fa cf       	rjmp	.-12     	; 0x1776 <dtoa_prf+0xc8>
    1782:	42 ff       	sbrs	r20, 2
    1784:	44 c0       	rjmp	.+136    	; 0x180e <dtoa_prf+0x160>
    1786:	91 11       	cpse	r25, r1
    1788:	02 c0       	rjmp	.+4      	; 0x178e <dtoa_prf+0xe0>
    178a:	83 e0       	ldi	r24, 0x03	; 3
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <dtoa_prf+0xe2>
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	81 17       	cp	r24, r17
    1792:	18 f4       	brcc	.+6      	; 0x179a <dtoa_prf+0xec>
    1794:	21 2f       	mov	r18, r17
    1796:	28 1b       	sub	r18, r24
    1798:	01 c0       	rjmp	.+2      	; 0x179c <dtoa_prf+0xee>
    179a:	20 e0       	ldi	r18, 0x00	; 0
    179c:	51 11       	cpse	r21, r1
    179e:	0b c0       	rjmp	.+22     	; 0x17b6 <dtoa_prf+0x108>
    17a0:	f6 01       	movw	r30, r12
    17a2:	82 2f       	mov	r24, r18
    17a4:	30 e2       	ldi	r19, 0x20	; 32
    17a6:	88 23       	and	r24, r24
    17a8:	19 f0       	breq	.+6      	; 0x17b0 <dtoa_prf+0x102>
    17aa:	31 93       	st	Z+, r19
    17ac:	81 50       	subi	r24, 0x01	; 1
    17ae:	fb cf       	rjmp	.-10     	; 0x17a6 <dtoa_prf+0xf8>
    17b0:	c2 0e       	add	r12, r18
    17b2:	d1 1c       	adc	r13, r1
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	99 23       	and	r25, r25
    17b8:	29 f0       	breq	.+10     	; 0x17c4 <dtoa_prf+0x116>
    17ba:	d6 01       	movw	r26, r12
    17bc:	9c 93       	st	X, r25
    17be:	f6 01       	movw	r30, r12
    17c0:	31 96       	adiw	r30, 0x01	; 1
    17c2:	6f 01       	movw	r12, r30
    17c4:	c6 01       	movw	r24, r12
    17c6:	03 96       	adiw	r24, 0x03	; 3
    17c8:	e2 fe       	sbrs	r14, 2
    17ca:	0b c0       	rjmp	.+22     	; 0x17e2 <dtoa_prf+0x134>
    17cc:	39 e4       	ldi	r19, 0x49	; 73
    17ce:	d6 01       	movw	r26, r12
    17d0:	3c 93       	st	X, r19
    17d2:	3e e4       	ldi	r19, 0x4E	; 78
    17d4:	11 96       	adiw	r26, 0x01	; 1
    17d6:	3c 93       	st	X, r19
    17d8:	11 97       	sbiw	r26, 0x01	; 1
    17da:	36 e4       	ldi	r19, 0x46	; 70
    17dc:	12 96       	adiw	r26, 0x02	; 2
    17de:	3c 93       	st	X, r19
    17e0:	07 c0       	rjmp	.+14     	; 0x17f0 <dtoa_prf+0x142>
    17e2:	39 e6       	ldi	r19, 0x69	; 105
    17e4:	f6 01       	movw	r30, r12
    17e6:	30 83       	st	Z, r19
    17e8:	3e e6       	ldi	r19, 0x6E	; 110
    17ea:	31 83       	std	Z+1, r19	; 0x01
    17ec:	36 e6       	ldi	r19, 0x66	; 102
    17ee:	32 83       	std	Z+2, r19	; 0x02
    17f0:	fc 01       	movw	r30, r24
    17f2:	32 2f       	mov	r19, r18
    17f4:	40 e2       	ldi	r20, 0x20	; 32
    17f6:	33 23       	and	r19, r19
    17f8:	19 f0       	breq	.+6      	; 0x1800 <dtoa_prf+0x152>
    17fa:	41 93       	st	Z+, r20
    17fc:	31 50       	subi	r19, 0x01	; 1
    17fe:	fb cf       	rjmp	.-10     	; 0x17f6 <dtoa_prf+0x148>
    1800:	fc 01       	movw	r30, r24
    1802:	e2 0f       	add	r30, r18
    1804:	f1 1d       	adc	r31, r1
    1806:	10 82       	st	Z, r1
    1808:	8e ef       	ldi	r24, 0xFE	; 254
    180a:	9f ef       	ldi	r25, 0xFF	; 255
    180c:	a6 c0       	rjmp	.+332    	; 0x195a <dtoa_prf+0x2ac>
    180e:	21 e0       	ldi	r18, 0x01	; 1
    1810:	30 e0       	ldi	r19, 0x00	; 0
    1812:	91 11       	cpse	r25, r1
    1814:	02 c0       	rjmp	.+4      	; 0x181a <dtoa_prf+0x16c>
    1816:	20 e0       	ldi	r18, 0x00	; 0
    1818:	30 e0       	ldi	r19, 0x00	; 0
    181a:	16 16       	cp	r1, r22
    181c:	17 06       	cpc	r1, r23
    181e:	1c f4       	brge	.+6      	; 0x1826 <dtoa_prf+0x178>
    1820:	fb 01       	movw	r30, r22
    1822:	31 96       	adiw	r30, 0x01	; 1
    1824:	02 c0       	rjmp	.+4      	; 0x182a <dtoa_prf+0x17c>
    1826:	e1 e0       	ldi	r30, 0x01	; 1
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	2e 0f       	add	r18, r30
    182c:	3f 1f       	adc	r19, r31
    182e:	bb 20       	and	r11, r11
    1830:	21 f0       	breq	.+8      	; 0x183a <dtoa_prf+0x18c>
    1832:	eb 2d       	mov	r30, r11
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	31 96       	adiw	r30, 0x01	; 1
    1838:	02 c0       	rjmp	.+4      	; 0x183e <dtoa_prf+0x190>
    183a:	e0 e0       	ldi	r30, 0x00	; 0
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	2e 0f       	add	r18, r30
    1840:	3f 1f       	adc	r19, r31
    1842:	e1 2f       	mov	r30, r17
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	2e 17       	cp	r18, r30
    1848:	3f 07       	cpc	r19, r31
    184a:	1c f4       	brge	.+6      	; 0x1852 <dtoa_prf+0x1a4>
    184c:	12 1b       	sub	r17, r18
    184e:	21 2f       	mov	r18, r17
    1850:	01 c0       	rjmp	.+2      	; 0x1854 <dtoa_prf+0x1a6>
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	8e 2d       	mov	r24, r14
    1856:	88 71       	andi	r24, 0x18	; 24
    1858:	59 f4       	brne	.+22     	; 0x1870 <dtoa_prf+0x1c2>
    185a:	f6 01       	movw	r30, r12
    185c:	82 2f       	mov	r24, r18
    185e:	30 e2       	ldi	r19, 0x20	; 32
    1860:	88 23       	and	r24, r24
    1862:	19 f0       	breq	.+6      	; 0x186a <dtoa_prf+0x1bc>
    1864:	31 93       	st	Z+, r19
    1866:	81 50       	subi	r24, 0x01	; 1
    1868:	fb cf       	rjmp	.-10     	; 0x1860 <dtoa_prf+0x1b2>
    186a:	c2 0e       	add	r12, r18
    186c:	d1 1c       	adc	r13, r1
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	99 23       	and	r25, r25
    1872:	29 f0       	breq	.+10     	; 0x187e <dtoa_prf+0x1d0>
    1874:	d6 01       	movw	r26, r12
    1876:	9c 93       	st	X, r25
    1878:	f6 01       	movw	r30, r12
    187a:	31 96       	adiw	r30, 0x01	; 1
    187c:	6f 01       	movw	r12, r30
    187e:	51 11       	cpse	r21, r1
    1880:	0b c0       	rjmp	.+22     	; 0x1898 <dtoa_prf+0x1ea>
    1882:	f6 01       	movw	r30, r12
    1884:	82 2f       	mov	r24, r18
    1886:	90 e3       	ldi	r25, 0x30	; 48
    1888:	88 23       	and	r24, r24
    188a:	19 f0       	breq	.+6      	; 0x1892 <dtoa_prf+0x1e4>
    188c:	91 93       	st	Z+, r25
    188e:	81 50       	subi	r24, 0x01	; 1
    1890:	fb cf       	rjmp	.-10     	; 0x1888 <dtoa_prf+0x1da>
    1892:	c2 0e       	add	r12, r18
    1894:	d1 1c       	adc	r13, r1
    1896:	20 e0       	ldi	r18, 0x00	; 0
    1898:	0f 2d       	mov	r16, r15
    189a:	06 0f       	add	r16, r22
    189c:	9a 81       	ldd	r25, Y+2	; 0x02
    189e:	34 2f       	mov	r19, r20
    18a0:	30 71       	andi	r19, 0x10	; 16
    18a2:	44 ff       	sbrs	r20, 4
    18a4:	03 c0       	rjmp	.+6      	; 0x18ac <dtoa_prf+0x1fe>
    18a6:	91 33       	cpi	r25, 0x31	; 49
    18a8:	09 f4       	brne	.+2      	; 0x18ac <dtoa_prf+0x1fe>
    18aa:	01 50       	subi	r16, 0x01	; 1
    18ac:	10 16       	cp	r1, r16
    18ae:	24 f4       	brge	.+8      	; 0x18b8 <dtoa_prf+0x20a>
    18b0:	09 30       	cpi	r16, 0x09	; 9
    18b2:	18 f0       	brcs	.+6      	; 0x18ba <dtoa_prf+0x20c>
    18b4:	08 e0       	ldi	r16, 0x08	; 8
    18b6:	01 c0       	rjmp	.+2      	; 0x18ba <dtoa_prf+0x20c>
    18b8:	01 e0       	ldi	r16, 0x01	; 1
    18ba:	ab 01       	movw	r20, r22
    18bc:	77 ff       	sbrs	r23, 7
    18be:	02 c0       	rjmp	.+4      	; 0x18c4 <dtoa_prf+0x216>
    18c0:	40 e0       	ldi	r20, 0x00	; 0
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	fb 01       	movw	r30, r22
    18c6:	e4 1b       	sub	r30, r20
    18c8:	f5 0b       	sbc	r31, r21
    18ca:	a1 e0       	ldi	r26, 0x01	; 1
    18cc:	b0 e0       	ldi	r27, 0x00	; 0
    18ce:	ac 0f       	add	r26, r28
    18d0:	bd 1f       	adc	r27, r29
    18d2:	ea 0f       	add	r30, r26
    18d4:	fb 1f       	adc	r31, r27
    18d6:	8e e2       	ldi	r24, 0x2E	; 46
    18d8:	a8 2e       	mov	r10, r24
    18da:	4b 01       	movw	r8, r22
    18dc:	80 1a       	sub	r8, r16
    18de:	91 08       	sbc	r9, r1
    18e0:	0b 2d       	mov	r16, r11
    18e2:	10 e0       	ldi	r17, 0x00	; 0
    18e4:	11 95       	neg	r17
    18e6:	01 95       	neg	r16
    18e8:	11 09       	sbc	r17, r1
    18ea:	4f 3f       	cpi	r20, 0xFF	; 255
    18ec:	bf ef       	ldi	r27, 0xFF	; 255
    18ee:	5b 07       	cpc	r21, r27
    18f0:	21 f4       	brne	.+8      	; 0x18fa <dtoa_prf+0x24c>
    18f2:	d6 01       	movw	r26, r12
    18f4:	ac 92       	st	X, r10
    18f6:	11 96       	adiw	r26, 0x01	; 1
    18f8:	6d 01       	movw	r12, r26
    18fa:	64 17       	cp	r22, r20
    18fc:	75 07       	cpc	r23, r21
    18fe:	2c f0       	brlt	.+10     	; 0x190a <dtoa_prf+0x25c>
    1900:	84 16       	cp	r8, r20
    1902:	95 06       	cpc	r9, r21
    1904:	14 f4       	brge	.+4      	; 0x190a <dtoa_prf+0x25c>
    1906:	81 81       	ldd	r24, Z+1	; 0x01
    1908:	01 c0       	rjmp	.+2      	; 0x190c <dtoa_prf+0x25e>
    190a:	80 e3       	ldi	r24, 0x30	; 48
    190c:	41 50       	subi	r20, 0x01	; 1
    190e:	51 09       	sbc	r21, r1
    1910:	31 96       	adiw	r30, 0x01	; 1
    1912:	d6 01       	movw	r26, r12
    1914:	11 96       	adiw	r26, 0x01	; 1
    1916:	7d 01       	movw	r14, r26
    1918:	40 17       	cp	r20, r16
    191a:	51 07       	cpc	r21, r17
    191c:	24 f0       	brlt	.+8      	; 0x1926 <dtoa_prf+0x278>
    191e:	d6 01       	movw	r26, r12
    1920:	8c 93       	st	X, r24
    1922:	67 01       	movw	r12, r14
    1924:	e2 cf       	rjmp	.-60     	; 0x18ea <dtoa_prf+0x23c>
    1926:	64 17       	cp	r22, r20
    1928:	75 07       	cpc	r23, r21
    192a:	39 f4       	brne	.+14     	; 0x193a <dtoa_prf+0x28c>
    192c:	96 33       	cpi	r25, 0x36	; 54
    192e:	20 f4       	brcc	.+8      	; 0x1938 <dtoa_prf+0x28a>
    1930:	95 33       	cpi	r25, 0x35	; 53
    1932:	19 f4       	brne	.+6      	; 0x193a <dtoa_prf+0x28c>
    1934:	31 11       	cpse	r19, r1
    1936:	01 c0       	rjmp	.+2      	; 0x193a <dtoa_prf+0x28c>
    1938:	81 e3       	ldi	r24, 0x31	; 49
    193a:	f6 01       	movw	r30, r12
    193c:	80 83       	st	Z, r24
    193e:	f7 01       	movw	r30, r14
    1940:	82 2f       	mov	r24, r18
    1942:	90 e2       	ldi	r25, 0x20	; 32
    1944:	88 23       	and	r24, r24
    1946:	19 f0       	breq	.+6      	; 0x194e <dtoa_prf+0x2a0>
    1948:	91 93       	st	Z+, r25
    194a:	81 50       	subi	r24, 0x01	; 1
    194c:	fb cf       	rjmp	.-10     	; 0x1944 <dtoa_prf+0x296>
    194e:	f7 01       	movw	r30, r14
    1950:	e2 0f       	add	r30, r18
    1952:	f1 1d       	adc	r31, r1
    1954:	10 82       	st	Z, r1
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	29 96       	adiw	r28, 0x09	; 9
    195c:	ec e0       	ldi	r30, 0x0C	; 12
    195e:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__epilogue_restores__+0xc>

00001962 <__ftoa_engine>:
    1962:	28 30       	cpi	r18, 0x08	; 8
    1964:	08 f0       	brcs	.+2      	; 0x1968 <__ftoa_engine+0x6>
    1966:	27 e0       	ldi	r18, 0x07	; 7
    1968:	33 27       	eor	r19, r19
    196a:	da 01       	movw	r26, r20
    196c:	99 0f       	add	r25, r25
    196e:	31 1d       	adc	r19, r1
    1970:	87 fd       	sbrc	r24, 7
    1972:	91 60       	ori	r25, 0x01	; 1
    1974:	00 96       	adiw	r24, 0x00	; 0
    1976:	61 05       	cpc	r22, r1
    1978:	71 05       	cpc	r23, r1
    197a:	39 f4       	brne	.+14     	; 0x198a <__ftoa_engine+0x28>
    197c:	32 60       	ori	r19, 0x02	; 2
    197e:	2e 5f       	subi	r18, 0xFE	; 254
    1980:	3d 93       	st	X+, r19
    1982:	30 e3       	ldi	r19, 0x30	; 48
    1984:	2a 95       	dec	r18
    1986:	e1 f7       	brne	.-8      	; 0x1980 <__ftoa_engine+0x1e>
    1988:	08 95       	ret
    198a:	9f 3f       	cpi	r25, 0xFF	; 255
    198c:	30 f0       	brcs	.+12     	; 0x199a <__ftoa_engine+0x38>
    198e:	80 38       	cpi	r24, 0x80	; 128
    1990:	71 05       	cpc	r23, r1
    1992:	61 05       	cpc	r22, r1
    1994:	09 f0       	breq	.+2      	; 0x1998 <__ftoa_engine+0x36>
    1996:	3c 5f       	subi	r19, 0xFC	; 252
    1998:	3c 5f       	subi	r19, 0xFC	; 252
    199a:	3d 93       	st	X+, r19
    199c:	91 30       	cpi	r25, 0x01	; 1
    199e:	08 f0       	brcs	.+2      	; 0x19a2 <__ftoa_engine+0x40>
    19a0:	80 68       	ori	r24, 0x80	; 128
    19a2:	91 1d       	adc	r25, r1
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	1f 93       	push	r17
    19aa:	0f 93       	push	r16
    19ac:	ff 92       	push	r15
    19ae:	ef 92       	push	r14
    19b0:	19 2f       	mov	r17, r25
    19b2:	98 7f       	andi	r25, 0xF8	; 248
    19b4:	96 95       	lsr	r25
    19b6:	e9 2f       	mov	r30, r25
    19b8:	96 95       	lsr	r25
    19ba:	96 95       	lsr	r25
    19bc:	e9 0f       	add	r30, r25
    19be:	ff 27       	eor	r31, r31
    19c0:	ee 53       	subi	r30, 0x3E	; 62
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	99 27       	eor	r25, r25
    19c6:	33 27       	eor	r19, r19
    19c8:	ee 24       	eor	r14, r14
    19ca:	ff 24       	eor	r15, r15
    19cc:	a7 01       	movw	r20, r14
    19ce:	e7 01       	movw	r28, r14
    19d0:	05 90       	lpm	r0, Z+
    19d2:	08 94       	sec
    19d4:	07 94       	ror	r0
    19d6:	28 f4       	brcc	.+10     	; 0x19e2 <__ftoa_engine+0x80>
    19d8:	36 0f       	add	r19, r22
    19da:	e7 1e       	adc	r14, r23
    19dc:	f8 1e       	adc	r15, r24
    19de:	49 1f       	adc	r20, r25
    19e0:	51 1d       	adc	r21, r1
    19e2:	66 0f       	add	r22, r22
    19e4:	77 1f       	adc	r23, r23
    19e6:	88 1f       	adc	r24, r24
    19e8:	99 1f       	adc	r25, r25
    19ea:	06 94       	lsr	r0
    19ec:	a1 f7       	brne	.-24     	; 0x19d6 <__ftoa_engine+0x74>
    19ee:	05 90       	lpm	r0, Z+
    19f0:	07 94       	ror	r0
    19f2:	28 f4       	brcc	.+10     	; 0x19fe <__ftoa_engine+0x9c>
    19f4:	e7 0e       	add	r14, r23
    19f6:	f8 1e       	adc	r15, r24
    19f8:	49 1f       	adc	r20, r25
    19fa:	56 1f       	adc	r21, r22
    19fc:	c1 1d       	adc	r28, r1
    19fe:	77 0f       	add	r23, r23
    1a00:	88 1f       	adc	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	66 1f       	adc	r22, r22
    1a06:	06 94       	lsr	r0
    1a08:	a1 f7       	brne	.-24     	; 0x19f2 <__ftoa_engine+0x90>
    1a0a:	05 90       	lpm	r0, Z+
    1a0c:	07 94       	ror	r0
    1a0e:	28 f4       	brcc	.+10     	; 0x1a1a <__ftoa_engine+0xb8>
    1a10:	f8 0e       	add	r15, r24
    1a12:	49 1f       	adc	r20, r25
    1a14:	56 1f       	adc	r21, r22
    1a16:	c7 1f       	adc	r28, r23
    1a18:	d1 1d       	adc	r29, r1
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	66 1f       	adc	r22, r22
    1a20:	77 1f       	adc	r23, r23
    1a22:	06 94       	lsr	r0
    1a24:	a1 f7       	brne	.-24     	; 0x1a0e <__ftoa_engine+0xac>
    1a26:	05 90       	lpm	r0, Z+
    1a28:	07 94       	ror	r0
    1a2a:	20 f4       	brcc	.+8      	; 0x1a34 <__ftoa_engine+0xd2>
    1a2c:	49 0f       	add	r20, r25
    1a2e:	56 1f       	adc	r21, r22
    1a30:	c7 1f       	adc	r28, r23
    1a32:	d8 1f       	adc	r29, r24
    1a34:	99 0f       	add	r25, r25
    1a36:	66 1f       	adc	r22, r22
    1a38:	77 1f       	adc	r23, r23
    1a3a:	88 1f       	adc	r24, r24
    1a3c:	06 94       	lsr	r0
    1a3e:	a9 f7       	brne	.-22     	; 0x1a2a <__ftoa_engine+0xc8>
    1a40:	84 91       	lpm	r24, Z
    1a42:	10 95       	com	r17
    1a44:	17 70       	andi	r17, 0x07	; 7
    1a46:	41 f0       	breq	.+16     	; 0x1a58 <__ftoa_engine+0xf6>
    1a48:	d6 95       	lsr	r29
    1a4a:	c7 95       	ror	r28
    1a4c:	57 95       	ror	r21
    1a4e:	47 95       	ror	r20
    1a50:	f7 94       	ror	r15
    1a52:	e7 94       	ror	r14
    1a54:	1a 95       	dec	r17
    1a56:	c1 f7       	brne	.-16     	; 0x1a48 <__ftoa_engine+0xe6>
    1a58:	e8 e6       	ldi	r30, 0x68	; 104
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	68 94       	set
    1a5e:	15 90       	lpm	r1, Z+
    1a60:	15 91       	lpm	r17, Z+
    1a62:	35 91       	lpm	r19, Z+
    1a64:	65 91       	lpm	r22, Z+
    1a66:	95 91       	lpm	r25, Z+
    1a68:	05 90       	lpm	r0, Z+
    1a6a:	7f e2       	ldi	r23, 0x2F	; 47
    1a6c:	73 95       	inc	r23
    1a6e:	e1 18       	sub	r14, r1
    1a70:	f1 0a       	sbc	r15, r17
    1a72:	43 0b       	sbc	r20, r19
    1a74:	56 0b       	sbc	r21, r22
    1a76:	c9 0b       	sbc	r28, r25
    1a78:	d0 09       	sbc	r29, r0
    1a7a:	c0 f7       	brcc	.-16     	; 0x1a6c <__ftoa_engine+0x10a>
    1a7c:	e1 0c       	add	r14, r1
    1a7e:	f1 1e       	adc	r15, r17
    1a80:	43 1f       	adc	r20, r19
    1a82:	56 1f       	adc	r21, r22
    1a84:	c9 1f       	adc	r28, r25
    1a86:	d0 1d       	adc	r29, r0
    1a88:	7e f4       	brtc	.+30     	; 0x1aa8 <__ftoa_engine+0x146>
    1a8a:	70 33       	cpi	r23, 0x30	; 48
    1a8c:	11 f4       	brne	.+4      	; 0x1a92 <__ftoa_engine+0x130>
    1a8e:	8a 95       	dec	r24
    1a90:	e6 cf       	rjmp	.-52     	; 0x1a5e <__ftoa_engine+0xfc>
    1a92:	e8 94       	clt
    1a94:	01 50       	subi	r16, 0x01	; 1
    1a96:	30 f0       	brcs	.+12     	; 0x1aa4 <__ftoa_engine+0x142>
    1a98:	08 0f       	add	r16, r24
    1a9a:	0a f4       	brpl	.+2      	; 0x1a9e <__ftoa_engine+0x13c>
    1a9c:	00 27       	eor	r16, r16
    1a9e:	02 17       	cp	r16, r18
    1aa0:	08 f4       	brcc	.+2      	; 0x1aa4 <__ftoa_engine+0x142>
    1aa2:	20 2f       	mov	r18, r16
    1aa4:	23 95       	inc	r18
    1aa6:	02 2f       	mov	r16, r18
    1aa8:	7a 33       	cpi	r23, 0x3A	; 58
    1aaa:	28 f0       	brcs	.+10     	; 0x1ab6 <__ftoa_engine+0x154>
    1aac:	79 e3       	ldi	r23, 0x39	; 57
    1aae:	7d 93       	st	X+, r23
    1ab0:	2a 95       	dec	r18
    1ab2:	e9 f7       	brne	.-6      	; 0x1aae <__ftoa_engine+0x14c>
    1ab4:	10 c0       	rjmp	.+32     	; 0x1ad6 <__ftoa_engine+0x174>
    1ab6:	7d 93       	st	X+, r23
    1ab8:	2a 95       	dec	r18
    1aba:	89 f6       	brne	.-94     	; 0x1a5e <__ftoa_engine+0xfc>
    1abc:	06 94       	lsr	r0
    1abe:	97 95       	ror	r25
    1ac0:	67 95       	ror	r22
    1ac2:	37 95       	ror	r19
    1ac4:	17 95       	ror	r17
    1ac6:	17 94       	ror	r1
    1ac8:	e1 18       	sub	r14, r1
    1aca:	f1 0a       	sbc	r15, r17
    1acc:	43 0b       	sbc	r20, r19
    1ace:	56 0b       	sbc	r21, r22
    1ad0:	c9 0b       	sbc	r28, r25
    1ad2:	d0 09       	sbc	r29, r0
    1ad4:	98 f0       	brcs	.+38     	; 0x1afc <__ftoa_engine+0x19a>
    1ad6:	23 95       	inc	r18
    1ad8:	7e 91       	ld	r23, -X
    1ada:	73 95       	inc	r23
    1adc:	7a 33       	cpi	r23, 0x3A	; 58
    1ade:	08 f0       	brcs	.+2      	; 0x1ae2 <__ftoa_engine+0x180>
    1ae0:	70 e3       	ldi	r23, 0x30	; 48
    1ae2:	7c 93       	st	X, r23
    1ae4:	20 13       	cpse	r18, r16
    1ae6:	b8 f7       	brcc	.-18     	; 0x1ad6 <__ftoa_engine+0x174>
    1ae8:	7e 91       	ld	r23, -X
    1aea:	70 61       	ori	r23, 0x10	; 16
    1aec:	7d 93       	st	X+, r23
    1aee:	30 f0       	brcs	.+12     	; 0x1afc <__ftoa_engine+0x19a>
    1af0:	83 95       	inc	r24
    1af2:	71 e3       	ldi	r23, 0x31	; 49
    1af4:	7d 93       	st	X+, r23
    1af6:	70 e3       	ldi	r23, 0x30	; 48
    1af8:	2a 95       	dec	r18
    1afa:	e1 f7       	brne	.-8      	; 0x1af4 <__ftoa_engine+0x192>
    1afc:	11 24       	eor	r1, r1
    1afe:	ef 90       	pop	r14
    1b00:	ff 90       	pop	r15
    1b02:	0f 91       	pop	r16
    1b04:	1f 91       	pop	r17
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	99 27       	eor	r25, r25
    1b0c:	87 fd       	sbrc	r24, 7
    1b0e:	90 95       	com	r25
    1b10:	08 95       	ret

00001b12 <strnlen_P>:
    1b12:	fc 01       	movw	r30, r24
    1b14:	05 90       	lpm	r0, Z+
    1b16:	61 50       	subi	r22, 0x01	; 1
    1b18:	70 40       	sbci	r23, 0x00	; 0
    1b1a:	01 10       	cpse	r0, r1
    1b1c:	d8 f7       	brcc	.-10     	; 0x1b14 <strnlen_P+0x2>
    1b1e:	80 95       	com	r24
    1b20:	90 95       	com	r25
    1b22:	8e 0f       	add	r24, r30
    1b24:	9f 1f       	adc	r25, r31
    1b26:	08 95       	ret

00001b28 <strnlen>:
    1b28:	fc 01       	movw	r30, r24
    1b2a:	61 50       	subi	r22, 0x01	; 1
    1b2c:	70 40       	sbci	r23, 0x00	; 0
    1b2e:	01 90       	ld	r0, Z+
    1b30:	01 10       	cpse	r0, r1
    1b32:	d8 f7       	brcc	.-10     	; 0x1b2a <strnlen+0x2>
    1b34:	80 95       	com	r24
    1b36:	90 95       	com	r25
    1b38:	8e 0f       	add	r24, r30
    1b3a:	9f 1f       	adc	r25, r31
    1b3c:	08 95       	ret

00001b3e <fputc>:
    1b3e:	0f 93       	push	r16
    1b40:	1f 93       	push	r17
    1b42:	cf 93       	push	r28
    1b44:	df 93       	push	r29
    1b46:	fb 01       	movw	r30, r22
    1b48:	23 81       	ldd	r18, Z+3	; 0x03
    1b4a:	21 fd       	sbrc	r18, 1
    1b4c:	03 c0       	rjmp	.+6      	; 0x1b54 <fputc+0x16>
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	9f ef       	ldi	r25, 0xFF	; 255
    1b52:	2c c0       	rjmp	.+88     	; 0x1bac <fputc+0x6e>
    1b54:	22 ff       	sbrs	r18, 2
    1b56:	16 c0       	rjmp	.+44     	; 0x1b84 <fputc+0x46>
    1b58:	46 81       	ldd	r20, Z+6	; 0x06
    1b5a:	57 81       	ldd	r21, Z+7	; 0x07
    1b5c:	24 81       	ldd	r18, Z+4	; 0x04
    1b5e:	35 81       	ldd	r19, Z+5	; 0x05
    1b60:	42 17       	cp	r20, r18
    1b62:	53 07       	cpc	r21, r19
    1b64:	44 f4       	brge	.+16     	; 0x1b76 <fputc+0x38>
    1b66:	a0 81       	ld	r26, Z
    1b68:	b1 81       	ldd	r27, Z+1	; 0x01
    1b6a:	9d 01       	movw	r18, r26
    1b6c:	2f 5f       	subi	r18, 0xFF	; 255
    1b6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b70:	31 83       	std	Z+1, r19	; 0x01
    1b72:	20 83       	st	Z, r18
    1b74:	8c 93       	st	X, r24
    1b76:	26 81       	ldd	r18, Z+6	; 0x06
    1b78:	37 81       	ldd	r19, Z+7	; 0x07
    1b7a:	2f 5f       	subi	r18, 0xFF	; 255
    1b7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1b7e:	37 83       	std	Z+7, r19	; 0x07
    1b80:	26 83       	std	Z+6, r18	; 0x06
    1b82:	14 c0       	rjmp	.+40     	; 0x1bac <fputc+0x6e>
    1b84:	8b 01       	movw	r16, r22
    1b86:	ec 01       	movw	r28, r24
    1b88:	fb 01       	movw	r30, r22
    1b8a:	00 84       	ldd	r0, Z+8	; 0x08
    1b8c:	f1 85       	ldd	r31, Z+9	; 0x09
    1b8e:	e0 2d       	mov	r30, r0
    1b90:	09 95       	icall
    1b92:	89 2b       	or	r24, r25
    1b94:	e1 f6       	brne	.-72     	; 0x1b4e <fputc+0x10>
    1b96:	d8 01       	movw	r26, r16
    1b98:	16 96       	adiw	r26, 0x06	; 6
    1b9a:	8d 91       	ld	r24, X+
    1b9c:	9c 91       	ld	r25, X
    1b9e:	17 97       	sbiw	r26, 0x07	; 7
    1ba0:	01 96       	adiw	r24, 0x01	; 1
    1ba2:	17 96       	adiw	r26, 0x07	; 7
    1ba4:	9c 93       	st	X, r25
    1ba6:	8e 93       	st	-X, r24
    1ba8:	16 97       	sbiw	r26, 0x06	; 6
    1baa:	ce 01       	movw	r24, r28
    1bac:	df 91       	pop	r29
    1bae:	cf 91       	pop	r28
    1bb0:	1f 91       	pop	r17
    1bb2:	0f 91       	pop	r16
    1bb4:	08 95       	ret

00001bb6 <__ultoa_invert>:
    1bb6:	fa 01       	movw	r30, r20
    1bb8:	aa 27       	eor	r26, r26
    1bba:	28 30       	cpi	r18, 0x08	; 8
    1bbc:	51 f1       	breq	.+84     	; 0x1c12 <__ultoa_invert+0x5c>
    1bbe:	20 31       	cpi	r18, 0x10	; 16
    1bc0:	81 f1       	breq	.+96     	; 0x1c22 <__ultoa_invert+0x6c>
    1bc2:	e8 94       	clt
    1bc4:	6f 93       	push	r22
    1bc6:	6e 7f       	andi	r22, 0xFE	; 254
    1bc8:	6e 5f       	subi	r22, 0xFE	; 254
    1bca:	7f 4f       	sbci	r23, 0xFF	; 255
    1bcc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bce:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd0:	af 4f       	sbci	r26, 0xFF	; 255
    1bd2:	b1 e0       	ldi	r27, 0x01	; 1
    1bd4:	3e d0       	rcall	.+124    	; 0x1c52 <__ultoa_invert+0x9c>
    1bd6:	b4 e0       	ldi	r27, 0x04	; 4
    1bd8:	3c d0       	rcall	.+120    	; 0x1c52 <__ultoa_invert+0x9c>
    1bda:	67 0f       	add	r22, r23
    1bdc:	78 1f       	adc	r23, r24
    1bde:	89 1f       	adc	r24, r25
    1be0:	9a 1f       	adc	r25, r26
    1be2:	a1 1d       	adc	r26, r1
    1be4:	68 0f       	add	r22, r24
    1be6:	79 1f       	adc	r23, r25
    1be8:	8a 1f       	adc	r24, r26
    1bea:	91 1d       	adc	r25, r1
    1bec:	a1 1d       	adc	r26, r1
    1bee:	6a 0f       	add	r22, r26
    1bf0:	71 1d       	adc	r23, r1
    1bf2:	81 1d       	adc	r24, r1
    1bf4:	91 1d       	adc	r25, r1
    1bf6:	a1 1d       	adc	r26, r1
    1bf8:	20 d0       	rcall	.+64     	; 0x1c3a <__ultoa_invert+0x84>
    1bfa:	09 f4       	brne	.+2      	; 0x1bfe <__ultoa_invert+0x48>
    1bfc:	68 94       	set
    1bfe:	3f 91       	pop	r19
    1c00:	2a e0       	ldi	r18, 0x0A	; 10
    1c02:	26 9f       	mul	r18, r22
    1c04:	11 24       	eor	r1, r1
    1c06:	30 19       	sub	r19, r0
    1c08:	30 5d       	subi	r19, 0xD0	; 208
    1c0a:	31 93       	st	Z+, r19
    1c0c:	de f6       	brtc	.-74     	; 0x1bc4 <__ultoa_invert+0xe>
    1c0e:	cf 01       	movw	r24, r30
    1c10:	08 95       	ret
    1c12:	46 2f       	mov	r20, r22
    1c14:	47 70       	andi	r20, 0x07	; 7
    1c16:	40 5d       	subi	r20, 0xD0	; 208
    1c18:	41 93       	st	Z+, r20
    1c1a:	b3 e0       	ldi	r27, 0x03	; 3
    1c1c:	0f d0       	rcall	.+30     	; 0x1c3c <__ultoa_invert+0x86>
    1c1e:	c9 f7       	brne	.-14     	; 0x1c12 <__ultoa_invert+0x5c>
    1c20:	f6 cf       	rjmp	.-20     	; 0x1c0e <__ultoa_invert+0x58>
    1c22:	46 2f       	mov	r20, r22
    1c24:	4f 70       	andi	r20, 0x0F	; 15
    1c26:	40 5d       	subi	r20, 0xD0	; 208
    1c28:	4a 33       	cpi	r20, 0x3A	; 58
    1c2a:	18 f0       	brcs	.+6      	; 0x1c32 <__ultoa_invert+0x7c>
    1c2c:	49 5d       	subi	r20, 0xD9	; 217
    1c2e:	31 fd       	sbrc	r19, 1
    1c30:	40 52       	subi	r20, 0x20	; 32
    1c32:	41 93       	st	Z+, r20
    1c34:	02 d0       	rcall	.+4      	; 0x1c3a <__ultoa_invert+0x84>
    1c36:	a9 f7       	brne	.-22     	; 0x1c22 <__ultoa_invert+0x6c>
    1c38:	ea cf       	rjmp	.-44     	; 0x1c0e <__ultoa_invert+0x58>
    1c3a:	b4 e0       	ldi	r27, 0x04	; 4
    1c3c:	a6 95       	lsr	r26
    1c3e:	97 95       	ror	r25
    1c40:	87 95       	ror	r24
    1c42:	77 95       	ror	r23
    1c44:	67 95       	ror	r22
    1c46:	ba 95       	dec	r27
    1c48:	c9 f7       	brne	.-14     	; 0x1c3c <__ultoa_invert+0x86>
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	61 05       	cpc	r22, r1
    1c4e:	71 05       	cpc	r23, r1
    1c50:	08 95       	ret
    1c52:	9b 01       	movw	r18, r22
    1c54:	ac 01       	movw	r20, r24
    1c56:	0a 2e       	mov	r0, r26
    1c58:	06 94       	lsr	r0
    1c5a:	57 95       	ror	r21
    1c5c:	47 95       	ror	r20
    1c5e:	37 95       	ror	r19
    1c60:	27 95       	ror	r18
    1c62:	ba 95       	dec	r27
    1c64:	c9 f7       	brne	.-14     	; 0x1c58 <__ultoa_invert+0xa2>
    1c66:	62 0f       	add	r22, r18
    1c68:	73 1f       	adc	r23, r19
    1c6a:	84 1f       	adc	r24, r20
    1c6c:	95 1f       	adc	r25, r21
    1c6e:	a0 1d       	adc	r26, r0
    1c70:	08 95       	ret

00001c72 <__prologue_saves__>:
    1c72:	2f 92       	push	r2
    1c74:	3f 92       	push	r3
    1c76:	4f 92       	push	r4
    1c78:	5f 92       	push	r5
    1c7a:	6f 92       	push	r6
    1c7c:	7f 92       	push	r7
    1c7e:	8f 92       	push	r8
    1c80:	9f 92       	push	r9
    1c82:	af 92       	push	r10
    1c84:	bf 92       	push	r11
    1c86:	cf 92       	push	r12
    1c88:	df 92       	push	r13
    1c8a:	ef 92       	push	r14
    1c8c:	ff 92       	push	r15
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	ca 1b       	sub	r28, r26
    1c9c:	db 0b       	sbc	r29, r27
    1c9e:	0f b6       	in	r0, 0x3f	; 63
    1ca0:	f8 94       	cli
    1ca2:	de bf       	out	0x3e, r29	; 62
    1ca4:	0f be       	out	0x3f, r0	; 63
    1ca6:	cd bf       	out	0x3d, r28	; 61
    1ca8:	09 94       	ijmp

00001caa <__epilogue_restores__>:
    1caa:	2a 88       	ldd	r2, Y+18	; 0x12
    1cac:	39 88       	ldd	r3, Y+17	; 0x11
    1cae:	48 88       	ldd	r4, Y+16	; 0x10
    1cb0:	5f 84       	ldd	r5, Y+15	; 0x0f
    1cb2:	6e 84       	ldd	r6, Y+14	; 0x0e
    1cb4:	7d 84       	ldd	r7, Y+13	; 0x0d
    1cb6:	8c 84       	ldd	r8, Y+12	; 0x0c
    1cb8:	9b 84       	ldd	r9, Y+11	; 0x0b
    1cba:	aa 84       	ldd	r10, Y+10	; 0x0a
    1cbc:	b9 84       	ldd	r11, Y+9	; 0x09
    1cbe:	c8 84       	ldd	r12, Y+8	; 0x08
    1cc0:	df 80       	ldd	r13, Y+7	; 0x07
    1cc2:	ee 80       	ldd	r14, Y+6	; 0x06
    1cc4:	fd 80       	ldd	r15, Y+5	; 0x05
    1cc6:	0c 81       	ldd	r16, Y+4	; 0x04
    1cc8:	1b 81       	ldd	r17, Y+3	; 0x03
    1cca:	aa 81       	ldd	r26, Y+2	; 0x02
    1ccc:	b9 81       	ldd	r27, Y+1	; 0x01
    1cce:	ce 0f       	add	r28, r30
    1cd0:	d1 1d       	adc	r29, r1
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	de bf       	out	0x3e, r29	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	cd bf       	out	0x3d, r28	; 61
    1cdc:	ed 01       	movw	r28, r26
    1cde:	08 95       	ret

00001ce0 <_exit>:
    1ce0:	f8 94       	cli

00001ce2 <__stop_program>:
    1ce2:	ff cf       	rjmp	.-2      	; 0x1ce2 <__stop_program>
